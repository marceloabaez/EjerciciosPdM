
TP_Integrador_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e4  080048e4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e8  080048e8  000148e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080048ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
 10 .bss          00000110  200000c8  200000c8  000200c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  000200c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d421  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c4  00000000  00000000  0002d519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009f8  00000000  00000000  000301c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f66  00000000  00000000  00030bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b45  00000000  00000000  00034b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f51  00000000  00000000  0004766b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a5bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e90  00000000  00000000  0012a60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004790 	.word	0x08004790

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	08004790 	.word	0x08004790

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <RTC_init>:
uint8_t buff[20];
static char i2c_msg[20];


// Setea parámetros de funcionamiento del RTC
void RTC_init(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
estado = RTC_activo;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <RTC_init+0x30>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
buff[0] = RTC_CTRL_INIT;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <RTC_init+0x34>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	701a      	strb	r2, [r3, #0]
buff[1] = RTC_STAT_INIT;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <RTC_init+0x34>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	705a      	strb	r2, [r3, #1]
I2C_Write(RTC_ADD, RTC_CTRL_REG, 1);
 80005ba:	2201      	movs	r2, #1
 80005bc:	210e      	movs	r1, #14
 80005be:	20d0      	movs	r0, #208	; 0xd0
 80005c0:	f000 fc4e 	bl	8000e60 <I2C_Write>
RTC_send_fecha(fecha_i);
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <RTC_init+0x38>)
 80005c6:	f000 fb8d 	bl	8000ce4 <RTC_send_fecha>
RTC_send_hora(hora_i);
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <RTC_init+0x3c>)
 80005cc:	f000 faf0 	bl	8000bb0 <RTC_send_hora>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000ec 	.word	0x200000ec
 80005d8:	200000f4 	.word	0x200000f4
 80005dc:	20000000 	.word	0x20000000
 80005e0:	2000000c 	.word	0x2000000c

080005e4 <RTC_estado>:


// MEF de estados del RTC
void RTC_estado(char comando){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	switch(estado){
 80005ee:	4b98      	ldr	r3, [pc, #608]	; (8000850 <RTC_estado+0x26c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	f000 80f7 	beq.w	80007e6 <RTC_estado+0x202>
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	f300 8204 	bgt.w	8000a06 <RTC_estado+0x422>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d002      	beq.n	8000608 <RTC_estado+0x24>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d02c      	beq.n	8000660 <RTC_estado+0x7c>
 8000606:	e1fe      	b.n	8000a06 <RTC_estado+0x422>

	case RTC_activo:
		RTC_leer_hora();
 8000608:	f000 fa1a 	bl	8000a40 <RTC_leer_hora>
		uartSendString(i2c_msg);
 800060c:	4891      	ldr	r0, [pc, #580]	; (8000854 <RTC_estado+0x270>)
 800060e:	f000 fcb9 	bl	8000f84 <uartSendString>
		uartSendString(espacio);
 8000612:	4891      	ldr	r0, [pc, #580]	; (8000858 <RTC_estado+0x274>)
 8000614:	f000 fcb6 	bl	8000f84 <uartSendString>
		RTC_leer_fecha();
 8000618:	f000 fa6e 	bl	8000af8 <RTC_leer_fecha>
		uartSendString(i2c_msg);
 800061c:	488d      	ldr	r0, [pc, #564]	; (8000854 <RTC_estado+0x270>)
 800061e:	f000 fcb1 	bl	8000f84 <uartSendString>
		uartSendString(salto);
 8000622:	488e      	ldr	r0, [pc, #568]	; (800085c <RTC_estado+0x278>)
 8000624:	f000 fcae 	bl	8000f84 <uartSendString>

		if (comando == 'A'){
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b41      	cmp	r3, #65	; 0x41
 800062c:	d109      	bne.n	8000642 <RTC_estado+0x5e>
			estado = RTC_set_hora;
 800062e:	4b88      	ldr	r3, [pc, #544]	; (8000850 <RTC_estado+0x26c>)
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
			RTC_leer_hora();
 8000634:	f000 fa04 	bl	8000a40 <RTC_leer_hora>
			opcion = 2;
 8000638:	4b89      	ldr	r3, [pc, #548]	; (8000860 <RTC_estado+0x27c>)
 800063a:	2202      	movs	r2, #2
 800063c:	701a      	strb	r2, [r3, #0]
			comando = '\0';
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
		}
		if (comando == 'B'){
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b42      	cmp	r3, #66	; 0x42
 8000646:	f040 81e2 	bne.w	8000a0e <RTC_estado+0x42a>
			estado = RTC_set_fecha;
 800064a:	4b81      	ldr	r3, [pc, #516]	; (8000850 <RTC_estado+0x26c>)
 800064c:	2203      	movs	r2, #3
 800064e:	601a      	str	r2, [r3, #0]
			RTC_leer_fecha();
 8000650:	f000 fa52 	bl	8000af8 <RTC_leer_fecha>
			opcion = 0;
 8000654:	4b82      	ldr	r3, [pc, #520]	; (8000860 <RTC_estado+0x27c>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			comando = '\0';
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
		}

		break;
 800065e:	e1d6      	b.n	8000a0e <RTC_estado+0x42a>

	case  RTC_set_hora:
		//RTC_leer_hora();
		if (comando == '2'){
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b32      	cmp	r3, #50	; 0x32
 8000664:	d152      	bne.n	800070c <RTC_estado+0x128>
			if(((opcion == 2) && (hora[opcion] < 23)) | ((opcion == 1) && (hora[opcion] < 59)) | ((opcion == 0) && (hora[opcion] < 59))){
 8000666:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <RTC_estado+0x27c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d108      	bne.n	8000680 <RTC_estado+0x9c>
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <RTC_estado+0x27c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b7b      	ldr	r3, [pc, #492]	; (8000864 <RTC_estado+0x280>)
 8000676:	5c9b      	ldrb	r3, [r3, r2]
 8000678:	2b16      	cmp	r3, #22
 800067a:	d801      	bhi.n	8000680 <RTC_estado+0x9c>
 800067c:	2301      	movs	r3, #1
 800067e:	e000      	b.n	8000682 <RTC_estado+0x9e>
 8000680:	2300      	movs	r3, #0
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b75      	ldr	r3, [pc, #468]	; (8000860 <RTC_estado+0x27c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d108      	bne.n	80006a2 <RTC_estado+0xbe>
 8000690:	4b73      	ldr	r3, [pc, #460]	; (8000860 <RTC_estado+0x27c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4b73      	ldr	r3, [pc, #460]	; (8000864 <RTC_estado+0x280>)
 8000698:	5c5b      	ldrb	r3, [r3, r1]
 800069a:	2b3a      	cmp	r3, #58	; 0x3a
 800069c:	d801      	bhi.n	80006a2 <RTC_estado+0xbe>
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <RTC_estado+0xc0>
 80006a2:	2300      	movs	r3, #0
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b6b      	ldr	r3, [pc, #428]	; (8000860 <RTC_estado+0x27c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d108      	bne.n	80006ca <RTC_estado+0xe6>
 80006b8:	4b69      	ldr	r3, [pc, #420]	; (8000860 <RTC_estado+0x27c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4b69      	ldr	r3, [pc, #420]	; (8000864 <RTC_estado+0x280>)
 80006c0:	5c5b      	ldrb	r3, [r3, r1]
 80006c2:	2b3a      	cmp	r3, #58	; 0x3a
 80006c4:	d801      	bhi.n	80006ca <RTC_estado+0xe6>
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <RTC_estado+0xe8>
 80006ca:	2300      	movs	r3, #0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d008      	beq.n	80006e4 <RTC_estado+0x100>
				hora[opcion]++;
 80006d2:	4b63      	ldr	r3, [pc, #396]	; (8000860 <RTC_estado+0x27c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4a63      	ldr	r2, [pc, #396]	; (8000864 <RTC_estado+0x280>)
 80006d8:	5cd2      	ldrb	r2, [r2, r3]
 80006da:	3201      	adds	r2, #1
 80006dc:	b2d1      	uxtb	r1, r2
 80006de:	4a61      	ldr	r2, [pc, #388]	; (8000864 <RTC_estado+0x280>)
 80006e0:	54d1      	strb	r1, [r2, r3]
 80006e2:	e005      	b.n	80006f0 <RTC_estado+0x10c>
			}
			else {
				hora[opcion] = 0;
 80006e4:	4b5e      	ldr	r3, [pc, #376]	; (8000860 <RTC_estado+0x27c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <RTC_estado+0x280>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	5499      	strb	r1, [r3, r2]
			}
			sprintf(i2c_msg, "%02hd:%02hd:%02hd", hora[2], hora[1], hora[0]);
 80006f0:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <RTC_estado+0x280>)
 80006f2:	789b      	ldrb	r3, [r3, #2]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b5b      	ldr	r3, [pc, #364]	; (8000864 <RTC_estado+0x280>)
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4b59      	ldr	r3, [pc, #356]	; (8000864 <RTC_estado+0x280>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	460b      	mov	r3, r1
 8000704:	4958      	ldr	r1, [pc, #352]	; (8000868 <RTC_estado+0x284>)
 8000706:	4853      	ldr	r0, [pc, #332]	; (8000854 <RTC_estado+0x270>)
 8000708:	f003 fbd4 	bl	8003eb4 <siprintf>
		}

		if (comando == '8'){
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b38      	cmp	r3, #56	; 0x38
 8000710:	d13c      	bne.n	800078c <RTC_estado+0x1a8>
			if(hora[opcion] > 0){
 8000712:	4b53      	ldr	r3, [pc, #332]	; (8000860 <RTC_estado+0x27c>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <RTC_estado+0x280>)
 800071a:	5c9b      	ldrb	r3, [r3, r2]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d008      	beq.n	8000732 <RTC_estado+0x14e>
			hora[opcion]--;
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <RTC_estado+0x27c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4a4f      	ldr	r2, [pc, #316]	; (8000864 <RTC_estado+0x280>)
 8000726:	5cd2      	ldrb	r2, [r2, r3]
 8000728:	3a01      	subs	r2, #1
 800072a:	b2d1      	uxtb	r1, r2
 800072c:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <RTC_estado+0x280>)
 800072e:	54d1      	strb	r1, [r2, r3]
 8000730:	e01e      	b.n	8000770 <RTC_estado+0x18c>
			}
			else if ((opcion == 0) | (opcion == 1)){
 8000732:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <RTC_estado+0x27c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b47      	ldr	r3, [pc, #284]	; (8000860 <RTC_estado+0x27c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	bf0c      	ite	eq
 8000748:	2301      	moveq	r3, #1
 800074a:	2300      	movne	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d006      	beq.n	8000764 <RTC_estado+0x180>
				hora[opcion] = 59;
 8000756:	4b42      	ldr	r3, [pc, #264]	; (8000860 <RTC_estado+0x27c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <RTC_estado+0x280>)
 800075e:	213b      	movs	r1, #59	; 0x3b
 8000760:	5499      	strb	r1, [r3, r2]
 8000762:	e005      	b.n	8000770 <RTC_estado+0x18c>
			}
			else{
				hora[opcion] = 23;
 8000764:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <RTC_estado+0x27c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <RTC_estado+0x280>)
 800076c:	2117      	movs	r1, #23
 800076e:	5499      	strb	r1, [r3, r2]
			}

			sprintf(i2c_msg, "%02hd:%02hd:%02hd", hora[2], hora[1], hora[0]);
 8000770:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <RTC_estado+0x280>)
 8000772:	789b      	ldrb	r3, [r3, #2]
 8000774:	461a      	mov	r2, r3
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <RTC_estado+0x280>)
 8000778:	785b      	ldrb	r3, [r3, #1]
 800077a:	4619      	mov	r1, r3
 800077c:	4b39      	ldr	r3, [pc, #228]	; (8000864 <RTC_estado+0x280>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	460b      	mov	r3, r1
 8000784:	4938      	ldr	r1, [pc, #224]	; (8000868 <RTC_estado+0x284>)
 8000786:	4833      	ldr	r0, [pc, #204]	; (8000854 <RTC_estado+0x270>)
 8000788:	f003 fb94 	bl	8003eb4 <siprintf>
		}

		if (comando == '6'){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b36      	cmp	r3, #54	; 0x36
 8000790:	d109      	bne.n	80007a6 <RTC_estado+0x1c2>
			if(opcion > 0){
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <RTC_estado+0x27c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d005      	beq.n	80007a6 <RTC_estado+0x1c2>
				opcion--;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <RTC_estado+0x27c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <RTC_estado+0x27c>)
 80007a4:	701a      	strb	r2, [r3, #0]
			}
		}
		if (comando == '4'){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b34      	cmp	r3, #52	; 0x34
 80007aa:	d109      	bne.n	80007c0 <RTC_estado+0x1dc>
			if(opcion < 2){
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <RTC_estado+0x27c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d805      	bhi.n	80007c0 <RTC_estado+0x1dc>
				opcion++;
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <RTC_estado+0x27c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <RTC_estado+0x27c>)
 80007be:	701a      	strb	r2, [r3, #0]
			}
		}
		uartSendString(i2c_msg);
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <RTC_estado+0x270>)
 80007c2:	f000 fbdf 	bl	8000f84 <uartSendString>
		uartSendString(salto);
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <RTC_estado+0x278>)
 80007c8:	f000 fbdc 	bl	8000f84 <uartSendString>
		if (comando == 'C'){
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b43      	cmp	r3, #67	; 0x43
 80007d0:	f040 811f 	bne.w	8000a12 <RTC_estado+0x42e>
			estado = RTC_activo;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <RTC_estado+0x26c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
			RTC_send_hora(i2c_msg);
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <RTC_estado+0x270>)
 80007dc:	f000 f9e8 	bl	8000bb0 <RTC_send_hora>
			comando = '\0';
 80007e0:	2300      	movs	r3, #0
 80007e2:	71fb      	strb	r3, [r7, #7]
		}
		break;
 80007e4:	e115      	b.n	8000a12 <RTC_estado+0x42e>

	case RTC_set_fecha:
		if (comando == '2'){
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b32      	cmp	r3, #50	; 0x32
 80007ea:	d171      	bne.n	80008d0 <RTC_estado+0x2ec>
			if(((opcion == 0) && (fecha[opcion] < 31)) | ((opcion == 1) && (fecha[opcion] < 12)) | ((opcion == 2) && (fecha[opcion] < 99))){
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <RTC_estado+0x27c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d108      	bne.n	8000806 <RTC_estado+0x222>
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <RTC_estado+0x27c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <RTC_estado+0x288>)
 80007fc:	5c9b      	ldrb	r3, [r3, r2]
 80007fe:	2b1e      	cmp	r3, #30
 8000800:	d801      	bhi.n	8000806 <RTC_estado+0x222>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <RTC_estado+0x224>
 8000806:	2300      	movs	r3, #0
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <RTC_estado+0x27c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d108      	bne.n	8000828 <RTC_estado+0x244>
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <RTC_estado+0x27c>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <RTC_estado+0x288>)
 800081e:	5c5b      	ldrb	r3, [r3, r1]
 8000820:	2b0b      	cmp	r3, #11
 8000822:	d801      	bhi.n	8000828 <RTC_estado+0x244>
 8000824:	2301      	movs	r3, #1
 8000826:	e000      	b.n	800082a <RTC_estado+0x246>
 8000828:	2300      	movs	r3, #0
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <RTC_estado+0x27c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d118      	bne.n	8000870 <RTC_estado+0x28c>
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <RTC_estado+0x27c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <RTC_estado+0x288>)
 8000846:	5c5b      	ldrb	r3, [r3, r1]
 8000848:	2b62      	cmp	r3, #98	; 0x62
 800084a:	d811      	bhi.n	8000870 <RTC_estado+0x28c>
 800084c:	2301      	movs	r3, #1
 800084e:	e010      	b.n	8000872 <RTC_estado+0x28e>
 8000850:	200000ec 	.word	0x200000ec
 8000854:	20000108 	.word	0x20000108
 8000858:	2000001c 	.word	0x2000001c
 800085c:	20000018 	.word	0x20000018
 8000860:	200000f0 	.word	0x200000f0
 8000864:	200000e4 	.word	0x200000e4
 8000868:	080047a8 	.word	0x080047a8
 800086c:	200000e8 	.word	0x200000e8
 8000870:	2300      	movs	r3, #0
 8000872:	4313      	orrs	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <RTC_estado+0x2a6>
				fecha[opcion]++;
 8000878:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <RTC_estado+0x43c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4a69      	ldr	r2, [pc, #420]	; (8000a24 <RTC_estado+0x440>)
 800087e:	5cd2      	ldrb	r2, [r2, r3]
 8000880:	3201      	adds	r2, #1
 8000882:	b2d1      	uxtb	r1, r2
 8000884:	4a67      	ldr	r2, [pc, #412]	; (8000a24 <RTC_estado+0x440>)
 8000886:	54d1      	strb	r1, [r2, r3]
 8000888:	e014      	b.n	80008b4 <RTC_estado+0x2d0>
			}
			else if((opcion == 0) || (opcion == 1)){
 800088a:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <RTC_estado+0x43c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d003      	beq.n	800089a <RTC_estado+0x2b6>
 8000892:	4b63      	ldr	r3, [pc, #396]	; (8000a20 <RTC_estado+0x43c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d106      	bne.n	80008a8 <RTC_estado+0x2c4>
				fecha[opcion] = 1;
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <RTC_estado+0x43c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <RTC_estado+0x440>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	5499      	strb	r1, [r3, r2]
 80008a6:	e005      	b.n	80008b4 <RTC_estado+0x2d0>
			}
			else{
				fecha[opcion] = 0;
 80008a8:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <RTC_estado+0x43c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b5d      	ldr	r3, [pc, #372]	; (8000a24 <RTC_estado+0x440>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	5499      	strb	r1, [r3, r2]
			}
			sprintf(i2c_msg, "%02hd/%02hd/%02hd", fecha[0], fecha[1], fecha[2]);
 80008b4:	4b5b      	ldr	r3, [pc, #364]	; (8000a24 <RTC_estado+0x440>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b5a      	ldr	r3, [pc, #360]	; (8000a24 <RTC_estado+0x440>)
 80008bc:	785b      	ldrb	r3, [r3, #1]
 80008be:	4619      	mov	r1, r3
 80008c0:	4b58      	ldr	r3, [pc, #352]	; (8000a24 <RTC_estado+0x440>)
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	460b      	mov	r3, r1
 80008c8:	4957      	ldr	r1, [pc, #348]	; (8000a28 <RTC_estado+0x444>)
 80008ca:	4858      	ldr	r0, [pc, #352]	; (8000a2c <RTC_estado+0x448>)
 80008cc:	f003 faf2 	bl	8003eb4 <siprintf>
		}
		if (comando == '8'){
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b38      	cmp	r3, #56	; 0x38
 80008d4:	d168      	bne.n	80009a8 <RTC_estado+0x3c4>
			if(((opcion == 0) && (fecha[opcion] > 1)) | ((opcion == 1) && (fecha[opcion] > 1)) | ((opcion == 2) && (fecha[opcion] > 0))){
 80008d6:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <RTC_estado+0x43c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <RTC_estado+0x30c>
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <RTC_estado+0x43c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <RTC_estado+0x440>)
 80008e6:	5c9b      	ldrb	r3, [r3, r2]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d901      	bls.n	80008f0 <RTC_estado+0x30c>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <RTC_estado+0x30e>
 80008f0:	2300      	movs	r3, #0
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <RTC_estado+0x43c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d108      	bne.n	8000912 <RTC_estado+0x32e>
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <RTC_estado+0x43c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <RTC_estado+0x440>)
 8000908:	5c5b      	ldrb	r3, [r3, r1]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d901      	bls.n	8000912 <RTC_estado+0x32e>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <RTC_estado+0x330>
 8000912:	2300      	movs	r3, #0
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <RTC_estado+0x43c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d108      	bne.n	800093a <RTC_estado+0x356>
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <RTC_estado+0x43c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <RTC_estado+0x440>)
 8000930:	5c5b      	ldrb	r3, [r3, r1]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <RTC_estado+0x356>
 8000936:	2301      	movs	r3, #1
 8000938:	e000      	b.n	800093c <RTC_estado+0x358>
 800093a:	2300      	movs	r3, #0
 800093c:	4313      	orrs	r3, r2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d008      	beq.n	8000954 <RTC_estado+0x370>
				fecha[opcion]--;
 8000942:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <RTC_estado+0x43c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <RTC_estado+0x440>)
 8000948:	5cd2      	ldrb	r2, [r2, r3]
 800094a:	3a01      	subs	r2, #1
 800094c:	b2d1      	uxtb	r1, r2
 800094e:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <RTC_estado+0x440>)
 8000950:	54d1      	strb	r1, [r2, r3]
 8000952:	e01b      	b.n	800098c <RTC_estado+0x3a8>
			}
			else if(opcion == 0){
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <RTC_estado+0x43c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d106      	bne.n	800096a <RTC_estado+0x386>
				fecha[opcion]= 31;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <RTC_estado+0x43c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <RTC_estado+0x440>)
 8000964:	211f      	movs	r1, #31
 8000966:	5499      	strb	r1, [r3, r2]
 8000968:	e010      	b.n	800098c <RTC_estado+0x3a8>
			}
			else if(opcion == 1){
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <RTC_estado+0x43c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d106      	bne.n	8000980 <RTC_estado+0x39c>
				fecha[opcion]= 12;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <RTC_estado+0x43c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <RTC_estado+0x440>)
 800097a:	210c      	movs	r1, #12
 800097c:	5499      	strb	r1, [r3, r2]
 800097e:	e005      	b.n	800098c <RTC_estado+0x3a8>
			}
			else{
				fecha[opcion]= 99;
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <RTC_estado+0x43c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <RTC_estado+0x440>)
 8000988:	2163      	movs	r1, #99	; 0x63
 800098a:	5499      	strb	r1, [r3, r2]
			}
			sprintf(i2c_msg, "%02hd/%02hd/%02hd", fecha[0], fecha[1], fecha[2]);
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <RTC_estado+0x440>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <RTC_estado+0x440>)
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	4619      	mov	r1, r3
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <RTC_estado+0x440>)
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	460b      	mov	r3, r1
 80009a0:	4921      	ldr	r1, [pc, #132]	; (8000a28 <RTC_estado+0x444>)
 80009a2:	4822      	ldr	r0, [pc, #136]	; (8000a2c <RTC_estado+0x448>)
 80009a4:	f003 fa86 	bl	8003eb4 <siprintf>
		}
		if (comando == '6'){
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b36      	cmp	r3, #54	; 0x36
 80009ac:	d109      	bne.n	80009c2 <RTC_estado+0x3de>
			if(opcion < 2){
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <RTC_estado+0x43c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d805      	bhi.n	80009c2 <RTC_estado+0x3de>
				opcion++;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <RTC_estado+0x43c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <RTC_estado+0x43c>)
 80009c0:	701a      	strb	r2, [r3, #0]
			}
		}
		if (comando == '4'){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b34      	cmp	r3, #52	; 0x34
 80009c6:	d109      	bne.n	80009dc <RTC_estado+0x3f8>
			if(opcion > 0){
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <RTC_estado+0x43c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <RTC_estado+0x3f8>
				opcion--;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <RTC_estado+0x43c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <RTC_estado+0x43c>)
 80009da:	701a      	strb	r2, [r3, #0]
			}
		}
		uartSendString(espacio_largo);
 80009dc:	4814      	ldr	r0, [pc, #80]	; (8000a30 <RTC_estado+0x44c>)
 80009de:	f000 fad1 	bl	8000f84 <uartSendString>
		uartSendString(i2c_msg);
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <RTC_estado+0x448>)
 80009e4:	f000 face 	bl	8000f84 <uartSendString>
		uartSendString(salto);
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <RTC_estado+0x450>)
 80009ea:	f000 facb 	bl	8000f84 <uartSendString>
		if (comando == 'C'){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b43      	cmp	r3, #67	; 0x43
 80009f2:	d110      	bne.n	8000a16 <RTC_estado+0x432>
			estado = RTC_activo;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <RTC_estado+0x454>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
			RTC_send_fecha(i2c_msg);
 80009fa:	480c      	ldr	r0, [pc, #48]	; (8000a2c <RTC_estado+0x448>)
 80009fc:	f000 f972 	bl	8000ce4 <RTC_send_fecha>
			comando = '\0';
 8000a00:	2300      	movs	r3, #0
 8000a02:	71fb      	strb	r3, [r7, #7]
			break;
 8000a04:	e008      	b.n	8000a18 <RTC_estado+0x434>
				}

		break;

	default:
		uartSendString(error_RTC);
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <RTC_estado+0x458>)
 8000a08:	f000 fabc 	bl	8000f84 <uartSendString>
		while(1);
 8000a0c:	e7fe      	b.n	8000a0c <RTC_estado+0x428>
		break;
 8000a0e:	bf00      	nop
 8000a10:	e002      	b.n	8000a18 <RTC_estado+0x434>
		break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <RTC_estado+0x434>
		break;
 8000a16:	bf00      	nop
		break;
	}

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000f0 	.word	0x200000f0
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	080047bc 	.word	0x080047bc
 8000a2c:	20000108 	.word	0x20000108
 8000a30:	20000020 	.word	0x20000020
 8000a34:	20000018 	.word	0x20000018
 8000a38:	200000ec 	.word	0x200000ec
 8000a3c:	2000002c 	.word	0x2000002c

08000a40 <RTC_leer_hora>:

// devuelve un string con la hora en formato hh:mm:ss
char* RTC_leer_hora(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af02      	add	r7, sp, #8
I2C_Read(RTC_ADD, RTC_TIME_ADD, 3);
 8000a46:	2203      	movs	r2, #3
 8000a48:	2100      	movs	r1, #0
 8000a4a:	20d0      	movs	r0, #208	; 0xd0
 8000a4c:	f000 f9ea 	bl	8000e24 <I2C_Read>
hora[0] = (buff[0] >> 4)* 10 + (buff[0] & 0b00001111);
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <RTC_leer_hora+0xac>)
 8000a72:	701a      	strb	r2, [r3, #0]
hora[1] = (buff[1] >> 4)* 10 + (buff[1] & 0b00001111);
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	091b      	lsrs	r3, r3, #4
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4413      	add	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <RTC_leer_hora+0xac>)
 8000a96:	705a      	strb	r2, [r3, #1]
hora[2] = ((buff[2] >> 4)& 0b00000011)* 10 + (buff[2] & 0b00001111);
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	091b      	lsrs	r3, r3, #4
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <RTC_leer_hora+0xa8>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <RTC_leer_hora+0xac>)
 8000ac0:	709a      	strb	r2, [r3, #2]
sprintf(i2c_msg, "%02hd:%02hd:%02hd", hora[2], hora[1], hora[0]);
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <RTC_leer_hora+0xac>)
 8000ac4:	789b      	ldrb	r3, [r3, #2]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <RTC_leer_hora+0xac>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <RTC_leer_hora+0xac>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4906      	ldr	r1, [pc, #24]	; (8000af0 <RTC_leer_hora+0xb0>)
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <RTC_leer_hora+0xb4>)
 8000ada:	f003 f9eb 	bl	8003eb4 <siprintf>
return(i2c_msg);
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <RTC_leer_hora+0xb4>)
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000f4 	.word	0x200000f4
 8000aec:	200000e4 	.word	0x200000e4
 8000af0:	080047a8 	.word	0x080047a8
 8000af4:	20000108 	.word	0x20000108

08000af8 <RTC_leer_fecha>:

// devuelve fecha en formato dd/mm/aaaa
char* RTC_leer_fecha(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
I2C_Read(RTC_ADD, RTC_DATE_ADD, 3);
 8000afe:	2203      	movs	r2, #3
 8000b00:	2104      	movs	r1, #4
 8000b02:	20d0      	movs	r0, #208	; 0xd0
 8000b04:	f000 f98e 	bl	8000e24 <I2C_Read>
fecha[0] = (buff[0] >> 4)* 10 + (buff[0] & 0b00001111);
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b2a:	701a      	strb	r2, [r3, #0]
fecha[1] = ((buff[1] >> 4) & 0b00000011)* 10 + (buff[1] & 0b00001111);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	0092      	lsls	r2, r2, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b54:	705a      	strb	r2, [r3, #1]
fecha[2] = (buff[2] >> 4)* 10 + (buff[2] & 0b00001111);
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	461a      	mov	r2, r3
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <RTC_leer_fecha+0xa8>)
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b78:	709a      	strb	r2, [r3, #2]
sprintf(i2c_msg, "%02hd/%02hd/%02hd", fecha[0], fecha[1], fecha[2]);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <RTC_leer_fecha+0xac>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <RTC_leer_fecha+0xb0>)
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <RTC_leer_fecha+0xb4>)
 8000b92:	f003 f98f 	bl	8003eb4 <siprintf>
return(i2c_msg);
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <RTC_leer_fecha+0xb4>)
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000f4 	.word	0x200000f4
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	080047bc 	.word	0x080047bc
 8000bac:	20000108 	.word	0x20000108

08000bb0 <RTC_send_hora>:

// acepta un string con la hora formateada y lo guarda en el RTC
void RTC_send_hora(char * i2c_msg){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
uint8_t decenas;
hora[2] = (i2c_msg[0] - '0')*10 + (i2c_msg[1] - '0');
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3b30      	subs	r3, #48	; 0x30
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	3b30      	subs	r3, #48	; 0x30
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <RTC_send_hora+0x128>)
 8000bda:	709a      	strb	r2, [r3, #2]
hora[1] = (i2c_msg[3] - '0')*10 + (i2c_msg[4] - '0');
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3303      	adds	r3, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3b30      	subs	r3, #48	; 0x30
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	3b30      	subs	r3, #48	; 0x30
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c00:	705a      	strb	r2, [r3, #1]
hora[0] = (i2c_msg[6] - '0')*10 + (i2c_msg[7] - '0');
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3306      	adds	r3, #6
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3b30      	subs	r3, #48	; 0x30
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3307      	adds	r3, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	3b30      	subs	r3, #48	; 0x30
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c26:	701a      	strb	r2, [r3, #0]
decenas = hora[2] / 10;
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c2a:	789b      	ldrb	r3, [r3, #2]
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <RTC_send_hora+0x12c>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	73fb      	strb	r3, [r7, #15]
buff[2] = (decenas << 4) + (hora[2] - decenas*10);
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c3e:	7899      	ldrb	r1, [r3, #2]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	4618      	mov	r0, r3
 8000c44:	0140      	lsls	r0, r0, #5
 8000c46:	1ac0      	subs	r0, r0, r3
 8000c48:	0080      	lsls	r0, r0, #2
 8000c4a:	1ac3      	subs	r3, r0, r3
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	440b      	add	r3, r1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <RTC_send_hora+0x130>)
 8000c5a:	709a      	strb	r2, [r3, #2]
decenas = hora[1] / 10;
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <RTC_send_hora+0x12c>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	73fb      	strb	r3, [r7, #15]
buff[1] = (decenas << 4) + (hora[1] - decenas*10);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c72:	7859      	ldrb	r1, [r3, #1]
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4618      	mov	r0, r3
 8000c78:	0140      	lsls	r0, r0, #5
 8000c7a:	1ac0      	subs	r0, r0, r3
 8000c7c:	0080      	lsls	r0, r0, #2
 8000c7e:	1ac3      	subs	r3, r0, r3
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	440b      	add	r3, r1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <RTC_send_hora+0x130>)
 8000c8e:	705a      	strb	r2, [r3, #1]
decenas = hora[0] / 10;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <RTC_send_hora+0x128>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <RTC_send_hora+0x12c>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	73fb      	strb	r3, [r7, #15]
buff[0] = (decenas << 4) + (hora[0] - decenas*10);
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <RTC_send_hora+0x128>)
 8000ca6:	7819      	ldrb	r1, [r3, #0]
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	4618      	mov	r0, r3
 8000cac:	0140      	lsls	r0, r0, #5
 8000cae:	1ac0      	subs	r0, r0, r3
 8000cb0:	0080      	lsls	r0, r0, #2
 8000cb2:	1ac3      	subs	r3, r0, r3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	440b      	add	r3, r1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <RTC_send_hora+0x130>)
 8000cc2:	701a      	strb	r2, [r3, #0]
I2C_Write(RTC_ADD, RTC_TIME_ADD, 3);
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	20d0      	movs	r0, #208	; 0xd0
 8000cca:	f000 f8c9 	bl	8000e60 <I2C_Write>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000e4 	.word	0x200000e4
 8000cdc:	cccccccd 	.word	0xcccccccd
 8000ce0:	200000f4 	.word	0x200000f4

08000ce4 <RTC_send_fecha>:

// acepta un string con la fecha formateada
void RTC_send_fecha(char * i2c_msg){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t decenas = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
	fecha[0] = (i2c_msg[0] - '0')*10 + (i2c_msg[1] - '0');
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3b30      	subs	r3, #48	; 0x30
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	3b30      	subs	r3, #48	; 0x30
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d12:	701a      	strb	r2, [r3, #0]
	fecha[1] = (i2c_msg[3] - '0')*10 + (i2c_msg[4] - '0');
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3303      	adds	r3, #3
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3b30      	subs	r3, #48	; 0x30
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3b30      	subs	r3, #48	; 0x30
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d38:	705a      	strb	r2, [r3, #1]
	fecha[2] = (i2c_msg[6] - '0')*10 + (i2c_msg[7] - '0');
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3306      	adds	r3, #6
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b30      	subs	r3, #48	; 0x30
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3307      	adds	r3, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	3b30      	subs	r3, #48	; 0x30
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d5e:	709a      	strb	r2, [r3, #2]
	decenas = fecha[0] / 10;
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <RTC_send_fecha+0x138>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	73fb      	strb	r3, [r7, #15]
	buff[0] = (decenas << 4) + (fecha[0] - decenas * 10);
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	0140      	lsls	r0, r0, #5
 8000d7e:	1ac0      	subs	r0, r0, r3
 8000d80:	0080      	lsls	r0, r0, #2
 8000d82:	1ac3      	subs	r3, r0, r3
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	440b      	add	r3, r1
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <RTC_send_fecha+0x13c>)
 8000d92:	701a      	strb	r2, [r3, #0]
	decenas = fecha[1] / 10;
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <RTC_send_fecha+0x134>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <RTC_send_fecha+0x138>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	73fb      	strb	r3, [r7, #15]
	buff[1] = (decenas << 4) + (fecha[1] - decenas * 10);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <RTC_send_fecha+0x134>)
 8000daa:	7859      	ldrb	r1, [r3, #1]
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4618      	mov	r0, r3
 8000db0:	0140      	lsls	r0, r0, #5
 8000db2:	1ac0      	subs	r0, r0, r3
 8000db4:	0080      	lsls	r0, r0, #2
 8000db6:	1ac3      	subs	r3, r0, r3
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <RTC_send_fecha+0x13c>)
 8000dc6:	705a      	strb	r2, [r3, #1]
	decenas = fecha[2] / 10;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <RTC_send_fecha+0x134>)
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <RTC_send_fecha+0x138>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	08db      	lsrs	r3, r3, #3
 8000dd4:	73fb      	strb	r3, [r7, #15]
	buff[2] = (decenas << 4) + (fecha[2] - decenas * 10);
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <RTC_send_fecha+0x134>)
 8000dde:	7899      	ldrb	r1, [r3, #2]
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	4618      	mov	r0, r3
 8000de4:	0140      	lsls	r0, r0, #5
 8000de6:	1ac0      	subs	r0, r0, r3
 8000de8:	0080      	lsls	r0, r0, #2
 8000dea:	1ac3      	subs	r3, r0, r3
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	440b      	add	r3, r1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <RTC_send_fecha+0x13c>)
 8000dfa:	709a      	strb	r2, [r3, #2]
	I2C_Write(RTC_ADD, RTC_DATE_ADD, 3);
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	2104      	movs	r1, #4
 8000e00:	20d0      	movs	r0, #208	; 0xd0
 8000e02:	f000 f82d 	bl	8000e60 <I2C_Write>
	HAL_Delay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0a:	f000 fa8d 	bl	8001328 <HAL_Delay>
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000e8 	.word	0x200000e8
 8000e1c:	cccccccd 	.word	0xcccccccd
 8000e20:	200000f4 	.word	0x200000f4

08000e24 <I2C_Read>:

extern I2C_HandleTypeDef hi2c1;
extern uint8_t buff[20];


void I2C_Read(uint16_t i2c_add, uint16_t mem_add, uint16_t size){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af04      	add	r7, sp, #16
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	807b      	strh	r3, [r7, #2]
HAL_I2C_Mem_Read(&hi2c1, i2c_add, mem_add, 1, buff, 3,80);
 8000e36:	88ba      	ldrh	r2, [r7, #4]
 8000e38:	88f9      	ldrh	r1, [r7, #6]
 8000e3a:	2350      	movs	r3, #80	; 0x50
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2303      	movs	r3, #3
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <I2C_Read+0x34>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <I2C_Read+0x38>)
 8000e4a:	f000 ff93 	bl	8001d74 <HAL_I2C_Mem_Read>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000f4 	.word	0x200000f4
 8000e5c:	20000168 	.word	0x20000168

08000e60 <I2C_Write>:

void I2C_Write(uint16_t i2c_add, uint16_t mem_add, uint16_t size){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	807b      	strh	r3, [r7, #2]
HAL_I2C_Mem_Write(&hi2c1, i2c_add, mem_add, 1, buff, 3, 80);
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	88f9      	ldrh	r1, [r7, #6]
 8000e76:	2350      	movs	r3, #80	; 0x50
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <I2C_Write+0x34>)
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <I2C_Write+0x38>)
 8000e86:	f000 fe7b 	bl	8001b80 <HAL_I2C_Mem_Write>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f4 	.word	0x200000f4
 8000e98:	20000168 	.word	0x20000168

08000e9c <delayInit>:
#include "API_delay.h"

// Actualiza el retardo y resetea la bandera del contador
void delayInit( delay_t * delay, tick_t duration ){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	721a      	strb	r2, [r3, #8]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <delayRead>:

//Si la bandera está alta resetea el tiempo de inicio, si está baja comprueba el
//tiempo transcurrido, si se ha cumplido levanta la bandera

bool_t delayRead( delay_t * delay ){
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	if(delay->running == false){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a1b      	ldrb	r3, [r3, #8]
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d009      	beq.n	8000ee8 <delayRead+0x2a>
		delay->startTime = HAL_GetTick();
 8000ed4:	f000 fa1c 	bl	8001310 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	721a      	strb	r2, [r3, #8]
		return 0;}
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e00f      	b.n	8000f08 <delayRead+0x4a>
	else {
		if((HAL_GetTick()-delay->startTime) >= delay->duration){
 8000ee8:	f000 fa12 	bl	8001310 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	1ad2      	subs	r2, r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d304      	bcc.n	8000f06 <delayRead+0x48>
			delay->running = false;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	721a      	strb	r2, [r3, #8]
			return(1);
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <delayRead+0x4a>
		}
		else{
			return 0;
 8000f06:	2300      	movs	r3, #0
		}}}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <uartInit>:

UART_HandleTypeDef UartHandle;
uint32_t uart_delay = 100;

//Inicializa la UART y envía por UART confirmación de inicialización y parámetros
bool_t uartInit(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	UartHandle.Instance        = USART3;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <uartInit+0x60>)
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <uartInit+0x64>)
 8000f18:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 115200;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <uartInit+0x60>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <uartInit+0x60>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <uartInit+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <uartInit+0x60>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <uartInit+0x60>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <uartInit+0x60>)
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <uartInit+0x60>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(&UartHandle) != HAL_OK){
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <uartInit+0x60>)
 8000f48:	f002 fa52 	bl	80033f0 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d004      	beq.n	8000f5c <uartInit+0x4c>
		uartSendString((uint8_t *) uart_failed);
 8000f52:	4809      	ldr	r0, [pc, #36]	; (8000f78 <uartInit+0x68>)
 8000f54:	f000 f816 	bl	8000f84 <uartSendString>
		return 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e006      	b.n	8000f6a <uartInit+0x5a>
	}
	uartSendString((uint8_t *) uart_ok);
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <uartInit+0x6c>)
 8000f5e:	f000 f811 	bl	8000f84 <uartSendString>
	uartSendString((uint8_t *) init_msg);
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <uartInit+0x70>)
 8000f64:	f000 f80e 	bl	8000f84 <uartSendString>
	return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000011c 	.word	0x2000011c
 8000f74:	40004800 	.word	0x40004800
 8000f78:	080047d0 	.word	0x080047d0
 8000f7c:	080047ec 	.word	0x080047ec
 8000f80:	0800480c 	.word	0x0800480c

08000f84 <uartSendString>:

//Envía un string por UART
void uartSendString(char * pstring){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	uint16_t len = ((uint16_t) strlen((const char *)pstring));
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff f92f 	bl	80001f0 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&UartHandle, pstring, len, uart_delay);
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <uartSendString+0x28>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	89fa      	ldrh	r2, [r7, #14]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <uartSendString+0x2c>)
 8000fa0:	f002 fa73 	bl	800348a <HAL_UART_Transmit>
	return;
 8000fa4:	bf00      	nop
}
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000048 	.word	0x20000048
 8000fb0:	2000011c 	.word	0x2000011c

08000fb4 <GPIO_init>:
const uint16_t column_pins [4] = {GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_11, GPIO_PIN_9};


//Inicializa 8 pines del puerto PORT, 4 como entradas y 4 como salidas.
void GPIO_init()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <GPIO_init+0x7c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <GPIO_init+0x7c>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <GPIO_init+0x7c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

	//Inicialización de pines de salida
	HAL_GPIO_WritePin(PORT, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <GPIO_init+0x80>)
 8000fec:	f000 fc6a 	bl	80018c4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000ff0:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000ff4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	2302      	movs	r3, #2
 8001000:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <GPIO_init+0x80>)
 8001008:	f000 fa98 	bl	800153c <HAL_GPIO_Init>

	//Inicialización de pines de entrada
	GPIO_InitStruct.Pin = (GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_9);
 800100c:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 8001010:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001016:	2302      	movs	r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	2302      	movs	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(PORT, &GPIO_InitStruct);
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <GPIO_init+0x80>)
 8001024:	f000 fa8a 	bl	800153c <HAL_GPIO_Init>

}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	40021000 	.word	0x40021000

08001038 <PressedKey_4x4>:

// Devuelve caracter presionado en el teclado 4x4, no admite pulsaciones dobles
// por defecto devuelve NULL
char PressedKey_4x4(){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	int i = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
	int j = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
	for(i=0; i<4; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	e03c      	b.n	80010c6 <PressedKey_4x4+0x8e>
		HAL_GPIO_WritePin(PORT, row_pins[i], GPIO_PIN_SET);
 800104c:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <PressedKey_4x4+0xa0>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001054:	2201      	movs	r2, #1
 8001056:	4619      	mov	r1, r3
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <PressedKey_4x4+0xa4>)
 800105a:	f000 fc33 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_Delay(delay_GPIO);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 f962 	bl	8001328 <HAL_Delay>
		for(j=0; j<4; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	e01e      	b.n	80010a8 <PressedKey_4x4+0x70>
			if(HAL_GPIO_ReadPin(PORT, column_pins[j])){
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <PressedKey_4x4+0xa8>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001072:	4619      	mov	r1, r3
 8001074:	4819      	ldr	r0, [pc, #100]	; (80010dc <PressedKey_4x4+0xa4>)
 8001076:	f000 fc0d 	bl	8001894 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d010      	beq.n	80010a2 <PressedKey_4x4+0x6a>
				HAL_GPIO_WritePin(PORT, row_pins[i], GPIO_PIN_RESET);
 8001080:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <PressedKey_4x4+0xa0>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <PressedKey_4x4+0xa4>)
 800108e:	f000 fc19 	bl	80018c4 <HAL_GPIO_WritePin>
				return buttons[i][j];
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <PressedKey_4x4+0xac>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	441a      	add	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	e015      	b.n	80010ce <PressedKey_4x4+0x96>
		for(j=0; j<4; j++){
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	dddd      	ble.n	800106a <PressedKey_4x4+0x32>
			}
		}
		HAL_GPIO_WritePin(PORT, row_pins[i], GPIO_PIN_RESET);
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <PressedKey_4x4+0xa0>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <PressedKey_4x4+0xa4>)
 80010bc:	f000 fc02 	bl	80018c4 <HAL_GPIO_WritePin>
	for(i=0; i<4; i++){
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	ddbf      	ble.n	800104c <PressedKey_4x4+0x14>
	}
	return '\n';
 80010cc:	230a      	movs	r3, #10
	}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08004878 	.word	0x08004878
 80010dc:	40021000 	.word	0x40021000
 80010e0:	08004880 	.word	0x08004880
 80010e4:	08004868 	.word	0x08004868

080010e8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <BSP_LED_On+0x2c>)
 80010f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <BSP_LED_On+0x30>)
 80010fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f000 fbdd 	bl	80018c4 <HAL_GPIO_WritePin>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000004c 	.word	0x2000004c
 8001118:	08004888 	.word	0x08004888

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <SystemInit+0x60>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <SystemInit+0x60>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <SystemInit+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <SystemInit+0x64>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <SystemInit+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <SystemInit+0x64>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <SystemInit+0x64>)
 8001148:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800114c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <SystemInit+0x64>)
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <SystemInit+0x68>)
 8001156:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <SystemInit+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <SystemInit+0x64>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SystemInit+0x60>)
 800116c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001170:	609a      	str	r2, [r3, #8]
#endif
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	40023800 	.word	0x40023800
 8001184:	24003010 	.word	0x24003010

08001188 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80011dc:	f000 f884 	bl	80012e8 <HAL_IncTick>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f002 fe1c 	bl	8003e50 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20030000 	.word	0x20030000
 8001244:	00000400 	.word	0x00000400
 8001248:	20000160 	.word	0x20000160
 800124c:	200001d8 	.word	0x200001d8

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x34>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_Init+0x34>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x34>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x34>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f931 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f001 fbca 	bl	8002a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f93b 	bl	8001522 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f000 f911 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000058 	.word	0x20000058
 80012e0:	20000060 	.word	0x20000060
 80012e4:	2000005c 	.word	0x2000005c

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000060 	.word	0x20000060
 800130c:	20000164 	.word	0x20000164

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000164 	.word	0x20000164

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000060 	.word	0x20000060

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff47 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff5c 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffb0 	bl	8001490 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e177      	b.n	8001848 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8166 	bne.w	8001842 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80c0 	beq.w	8001842 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_GPIO_Init+0x324>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a65      	ldr	r2, [pc, #404]	; (8001860 <HAL_GPIO_Init+0x324>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_GPIO_Init+0x324>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a61      	ldr	r2, [pc, #388]	; (8001864 <HAL_GPIO_Init+0x328>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_GPIO_Init+0x32c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d037      	beq.n	800177a <HAL_GPIO_Init+0x23e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a57      	ldr	r2, [pc, #348]	; (800186c <HAL_GPIO_Init+0x330>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d031      	beq.n	8001776 <HAL_GPIO_Init+0x23a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a56      	ldr	r2, [pc, #344]	; (8001870 <HAL_GPIO_Init+0x334>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x236>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a55      	ldr	r2, [pc, #340]	; (8001874 <HAL_GPIO_Init+0x338>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x232>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a54      	ldr	r2, [pc, #336]	; (8001878 <HAL_GPIO_Init+0x33c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x22e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a53      	ldr	r2, [pc, #332]	; (800187c <HAL_GPIO_Init+0x340>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x22a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_GPIO_Init+0x344>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x226>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_GPIO_Init+0x348>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x222>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <HAL_GPIO_Init+0x34c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x21e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_GPIO_Init+0x350>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x21a>
 8001752:	2309      	movs	r3, #9
 8001754:	e012      	b.n	800177c <HAL_GPIO_Init+0x240>
 8001756:	230a      	movs	r3, #10
 8001758:	e010      	b.n	800177c <HAL_GPIO_Init+0x240>
 800175a:	2308      	movs	r3, #8
 800175c:	e00e      	b.n	800177c <HAL_GPIO_Init+0x240>
 800175e:	2307      	movs	r3, #7
 8001760:	e00c      	b.n	800177c <HAL_GPIO_Init+0x240>
 8001762:	2306      	movs	r3, #6
 8001764:	e00a      	b.n	800177c <HAL_GPIO_Init+0x240>
 8001766:	2305      	movs	r3, #5
 8001768:	e008      	b.n	800177c <HAL_GPIO_Init+0x240>
 800176a:	2304      	movs	r3, #4
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x240>
 800176e:	2303      	movs	r3, #3
 8001770:	e004      	b.n	800177c <HAL_GPIO_Init+0x240>
 8001772:	2302      	movs	r3, #2
 8001774:	e002      	b.n	800177c <HAL_GPIO_Init+0x240>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x240>
 800177a:	2300      	movs	r3, #0
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f002 0203 	and.w	r2, r2, #3
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	4093      	lsls	r3, r2
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800178c:	4935      	ldr	r1, [pc, #212]	; (8001864 <HAL_GPIO_Init+0x328>)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_GPIO_Init+0x354>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <HAL_GPIO_Init+0x354>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017c4:	4b32      	ldr	r3, [pc, #200]	; (8001890 <HAL_GPIO_Init+0x354>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e8:	4a29      	ldr	r2, [pc, #164]	; (8001890 <HAL_GPIO_Init+0x354>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <HAL_GPIO_Init+0x354>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_GPIO_Init+0x354>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_GPIO_Init+0x354>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_GPIO_Init+0x354>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	f67f ae84 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40013800 	.word	0x40013800
 8001868:	40020000 	.word	0x40020000
 800186c:	40020400 	.word	0x40020400
 8001870:	40020800 	.word	0x40020800
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40021000 	.word	0x40021000
 800187c:	40021400 	.word	0x40021400
 8001880:	40021800 	.word	0x40021800
 8001884:	40021c00 	.word	0x40021c00
 8001888:	40022000 	.word	0x40022000
 800188c:	40022400 	.word	0x40022400
 8001890:	40013c00 	.word	0x40013c00

08001894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e001      	b.n	80018b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e12b      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f002 fa1e 	bl	8003d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800194a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800195a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f001 fd20 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <HAL_I2C_Init+0x274>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d807      	bhi.n	800197c <HAL_I2C_Init+0x84>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a80      	ldr	r2, [pc, #512]	; (8001b70 <HAL_I2C_Init+0x278>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	e006      	b.n	800198a <HAL_I2C_Init+0x92>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a7d      	ldr	r2, [pc, #500]	; (8001b74 <HAL_I2C_Init+0x27c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	bf94      	ite	ls
 8001984:	2301      	movls	r3, #1
 8001986:	2300      	movhi	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0e7      	b.n	8001b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4a78      	ldr	r2, [pc, #480]	; (8001b78 <HAL_I2C_Init+0x280>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	0c9b      	lsrs	r3, r3, #18
 800199c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d802      	bhi.n	80019cc <HAL_I2C_Init+0xd4>
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3301      	adds	r3, #1
 80019ca:	e009      	b.n	80019e0 <HAL_I2C_Init+0xe8>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <HAL_I2C_Init+0x284>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	495c      	ldr	r1, [pc, #368]	; (8001b6c <HAL_I2C_Init+0x274>)
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d819      	bhi.n	8001a34 <HAL_I2C_Init+0x13c>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e59      	subs	r1, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a14:	400b      	ands	r3, r1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_I2C_Init+0x138>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e59      	subs	r1, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	e051      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e04f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d111      	bne.n	8001a60 <HAL_I2C_Init+0x168>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_Init+0x18e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	0099      	lsls	r1, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_Init+0x196>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e022      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10e      	bne.n	8001ab4 <HAL_I2C_Init+0x1bc>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e58      	subs	r0, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6859      	ldr	r1, [r3, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	e00f      	b.n	8001ad4 <HAL_I2C_Init+0x1dc>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	6809      	ldr	r1, [r1, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6911      	ldr	r1, [r2, #16]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68d2      	ldr	r2, [r2, #12]
 8001b0e:	4311      	orrs	r1, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	000186a0 	.word	0x000186a0
 8001b70:	001e847f 	.word	0x001e847f
 8001b74:	003d08ff 	.word	0x003d08ff
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	817b      	strh	r3, [r7, #10]
 8001b92:	460b      	mov	r3, r1
 8001b94:	813b      	strh	r3, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b9a:	f7ff fbb9 	bl	8001310 <HAL_GetTick>
 8001b9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	f040 80d9 	bne.w	8001d60 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2319      	movs	r3, #25
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	496d      	ldr	r1, [pc, #436]	; (8001d6c <HAL_I2C_Mem_Write+0x1ec>)
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fc7f 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0cc      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_Mem_Write+0x56>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0c5      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d007      	beq.n	8001bfc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <HAL_I2C_Mem_Write+0x1f0>)
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c3e:	88f8      	ldrh	r0, [r7, #6]
 8001c40:	893a      	ldrh	r2, [r7, #8]
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fab6 	bl	80021c0 <I2C_RequestMemoryWrite>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d052      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e081      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fd00 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00d      	beq.n	8001c8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d107      	bne.n	8001c86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06b      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d11b      	bne.n	8001d00 <HAL_I2C_Mem_Write+0x180>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d017      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1aa      	bne.n	8001c5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fcec 	bl	80026ea <I2C_WaitOnBTFFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d107      	bne.n	8001d30 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d2e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e016      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e000      	b.n	8001d62 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2302      	movs	r3, #2
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	00100002 	.word	0x00100002
 8001d70:	ffff0000 	.word	0xffff0000

08001d74 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d8e:	f7ff fabf 	bl	8001310 <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	f040 8208 	bne.w	80021b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2319      	movs	r3, #25
 8001da8:	2201      	movs	r2, #1
 8001daa:	497b      	ldr	r1, [pc, #492]	; (8001f98 <HAL_I2C_Mem_Read+0x224>)
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fb85 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001db8:	2302      	movs	r3, #2
 8001dba:	e1fb      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Mem_Read+0x56>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e1f4      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d007      	beq.n	8001df0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2222      	movs	r2, #34	; 0x22
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	; (8001f9c <HAL_I2C_Mem_Read+0x228>)
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e32:	88f8      	ldrh	r0, [r7, #6]
 8001e34:	893a      	ldrh	r2, [r7, #8]
 8001e36:	8979      	ldrh	r1, [r7, #10]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4603      	mov	r3, r0
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fa52 	bl	80022ec <I2C_RequestMemoryRead>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1b0      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d113      	bne.n	8001e82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	623b      	str	r3, [r7, #32]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e184      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d11b      	bne.n	8001ec2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e164      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d11b      	bne.n	8001f02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	e144      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f18:	e138      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	f200 80f1 	bhi.w	8002106 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d123      	bne.n	8001f74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fc1b 	bl	800276c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e139      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f72:	e10b      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d14e      	bne.n	800201a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f82:	2200      	movs	r2, #0
 8001f84:	4906      	ldr	r1, [pc, #24]	; (8001fa0 <HAL_I2C_Mem_Read+0x22c>)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa98 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e10e      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
 8001f96:	bf00      	nop
 8001f98:	00100002 	.word	0x00100002
 8001f9c:	ffff0000 	.word	0xffff0000
 8001fa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002018:	e0b8      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	2200      	movs	r2, #0
 8002022:	4966      	ldr	r1, [pc, #408]	; (80021bc <HAL_I2C_Mem_Read+0x448>)
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fa49 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0bf      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207c:	2200      	movs	r2, #0
 800207e:	494f      	ldr	r1, [pc, #316]	; (80021bc <HAL_I2C_Mem_Read+0x448>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fa1b 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e091      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002104:	e042      	b.n	800218c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fb2e 	bl	800276c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e04c      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d118      	bne.n	800218c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f aec2 	bne.w	8001f1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	00010004 	.word	0x00010004

080021c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f960 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002210:	d103      	bne.n	800221a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e05f      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800222c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	492d      	ldr	r1, [pc, #180]	; (80022e8 <I2C_RequestMemoryWrite+0x128>)
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f998 	bl	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04c      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa02 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b04      	cmp	r3, #4
 8002270:	d107      	bne.n	8002282 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02b      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228c:	893b      	ldrh	r3, [r7, #8]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e021      	b.n	80022dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f9dc 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d107      	bne.n	80022ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e005      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	00010002 	.word	0x00010002

080022ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2200      	movs	r2, #0
 800232e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8c2 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d103      	bne.n	8002356 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0aa      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	4952      	ldr	r1, [pc, #328]	; (80024b8 <I2C_RequestMemoryRead+0x1cc>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8fa 	bl	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e097      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f964 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e076      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e021      	b.n	8002418 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f93e 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d107      	bne.n	800240a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e050      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f923 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e035      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2200      	movs	r2, #0
 800245c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f82b 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247a:	d103      	bne.n	8002484 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e013      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <I2C_RequestMemoryRead+0x1cc>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f863 	bl	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	00010002 	.word	0x00010002

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e025      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d4:	d021      	beq.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe ff1b 	bl	8001310 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d116      	bne.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e023      	b.n	8002562 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10d      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	e00c      	b.n	800255a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	429a      	cmp	r2, r3
 800255e:	d0b6      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002578:	e051      	b.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d123      	bne.n	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e046      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d8:	d021      	beq.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025da:	f7fe fe99 	bl	8001310 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d116      	bne.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e020      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10c      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4013      	ands	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e00b      	b.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d18d      	bne.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	e02d      	b.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8ce 	bl	8002818 <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02d      	b.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d021      	beq.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fe3f 	bl	8001310 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d1ca      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f6:	e02d      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f88d 	bl	8002818 <I2C_IsAcknowledgeFailed>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e02d      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270e:	d021      	beq.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002710:	f7fe fdfe 	bl	8001310 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b04      	cmp	r3, #4
 8002760:	d1ca      	bne.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002778:	e042      	b.n	8002800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b10      	cmp	r3, #16
 8002786:	d119      	bne.n	80027bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0210 	mvn.w	r2, #16
 8002790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e029      	b.n	8002810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7fe fda8 	bl	8001310 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d302      	bcc.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d1b5      	bne.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282e:	d11b      	bne.n	8002868 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002838:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b20      	cmp	r3, #32
 800288a:	d129      	bne.n	80028e0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0210 	bic.w	r2, r2, #16
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b20      	cmp	r3, #32
 8002906:	d12a      	bne.n	800295e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002928:	89fb      	ldrh	r3, [r7, #14]
 800292a:	f023 030f 	bic.w	r3, r3, #15
 800292e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	4313      	orrs	r3, r2
 8002938:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	89fa      	ldrh	r2, [r7, #14]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	4a22      	ldr	r2, [pc, #136]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6313      	str	r3, [r2, #48]	; 0x30
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 800299a:	f043 0308 	orr.w	r3, r3, #8
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
 80029a0:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80029c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80029da:	2307      	movs	r3, #7
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	4809      	ldr	r0, [pc, #36]	; (8002a0c <HAL_UART_MspInit+0xa0>)
 80029e6:	f7fe fda9 	bl	800153c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80029ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80029f0:	2307      	movs	r3, #7
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4804      	ldr	r0, [pc, #16]	; (8002a0c <HAL_UART_MspInit+0xa0>)
 80029fc:	f7fe fd9e 	bl	800153c <HAL_GPIO_Init>
}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020c00 	.word	0x40020c00

08002a10 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	603b      	str	r3, [r7, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4c:	f7fe fc60 	bl	8001310 <HAL_GetTick>
 8002a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a52:	e009      	b.n	8002a68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a54:	f7fe fc5c 	bl	8001310 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a62:	d901      	bls.n	8002a68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e01f      	b.n	8002aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a74:	d1ee      	bne.n	8002a54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a7c:	f7fe fc48 	bl	8001310 <HAL_GetTick>
 8002a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a82:	e009      	b.n	8002a98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a84:	f7fe fc44 	bl	8001310 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a92:	d901      	bls.n	8002a98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e007      	b.n	8002aa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa4:	d1ee      	bne.n	8002a84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	420e0040 	.word	0x420e0040
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	420e0044 	.word	0x420e0044

08002ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e267      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d075      	beq.n	8002bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d00c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e242      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x74>
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x98>
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a6f      	ldr	r2, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6c      	ldr	r2, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xb0>
 8002b58:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a68      	ldr	r2, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fbca 	bl	8001310 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fbc6 	bl	8001310 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e207      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xc0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fbb6 	bl	8001310 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fbb2 	bl	8001310 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1f3      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xe8>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d063      	beq.n	8002c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1c7      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4937      	ldr	r1, [pc, #220]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e03a      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fb6b 	bl	8001310 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3e:	f7fe fb67 	bl	8001310 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e1a8      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4925      	ldr	r1, [pc, #148]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_RCC_OscConfig+0x244>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb4a 	bl	8001310 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fe fb46 	bl	8001310 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e187      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d036      	beq.n	8002d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe fb2a 	bl	8001310 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fb26 	bl	8001310 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e167      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x200>
 8002cde:	e01b      	b.n	8002d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x248>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fb13 	bl	8001310 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	e00e      	b.n	8002d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cee:	f7fe fb0f 	bl	8001310 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d907      	bls.n	8002d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e150      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002d00:	40023800 	.word	0x40023800
 8002d04:	42470000 	.word	0x42470000
 8002d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ea      	bne.n	8002cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8097 	beq.w	8002e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	4b7d      	ldr	r3, [pc, #500]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b77      	ldr	r3, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b74      	ldr	r3, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a73      	ldr	r2, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe facf 	bl	8001310 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe facb 	bl	8001310 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e10c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x474>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d106      	bne.n	8002daa <HAL_RCC_OscConfig+0x2ea>
 8002d9c:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	e01c      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x30c>
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a5e      	ldr	r2, [pc, #376]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b5c      	ldr	r3, [pc, #368]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a5b      	ldr	r2, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0x324>
 8002dcc:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a54      	ldr	r2, [pc, #336]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fa90 	bl	8001310 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe fa8c 	bl	8001310 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0cb      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ee      	beq.n	8002df4 <HAL_RCC_OscConfig+0x334>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e18:	f7fe fa7a 	bl	8001310 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fa76 	bl	8001310 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e0b5      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ee      	bne.n	8002e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a1 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e5e:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d05c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d141      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fa4a 	bl	8001310 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fa46 	bl	8001310 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e087      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	019b      	lsls	r3, r3, #6
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	041b      	lsls	r3, r3, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	491b      	ldr	r1, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fa1f 	bl	8001310 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe fa1b 	bl	8001310 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e05c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x416>
 8002ef4:	e054      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_OscConfig+0x478>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fa08 	bl	8001310 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fa04 	bl	8001310 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e045      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x470>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x444>
 8002f22:	e03d      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e038      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x4ec>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d028      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d121      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d11a      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	3b01      	subs	r3, #1
 8002f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0cc      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d90c      	bls.n	8002fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800300e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d044      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e06f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e067      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f023 0203 	bic.w	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4934      	ldr	r1, [pc, #208]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a0:	f7fe f936 	bl	8001310 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	e00a      	b.n	80030be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a8:	f7fe f932 	bl	8001310 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e04f      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 020c 	and.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d1eb      	bne.n	80030a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe f896 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08004890 	.word	0x08004890
 8003174:	20000058 	.word	0x20000058
 8003178:	2000005c 	.word	0x2000005c

0800317c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b094      	sub	sp, #80	; 0x50
 8003182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	2300      	movs	r3, #0
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	2300      	movs	r3, #0
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003194:	4b79      	ldr	r3, [pc, #484]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d00d      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x40>
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 80e1 	bhi.w	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x34>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ae:	e0db      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031b4:	e0db      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_GetSysClockFreq+0x208>)
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ba:	e0d8      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031bc:	4b6f      	ldr	r3, [pc, #444]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031c6:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d063      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d2:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	099b      	lsrs	r3, r3, #6
 80031d8:	2200      	movs	r2, #0
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
 80031dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
 80031ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	0159      	lsls	r1, r3, #5
 80031fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003200:	0150      	lsls	r0, r2, #5
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4621      	mov	r1, r4
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	6139      	str	r1, [r7, #16]
 800320c:	4629      	mov	r1, r5
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003220:	4659      	mov	r1, fp
 8003222:	018b      	lsls	r3, r1, #6
 8003224:	4651      	mov	r1, sl
 8003226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800322a:	4651      	mov	r1, sl
 800322c:	018a      	lsls	r2, r1, #6
 800322e:	4651      	mov	r1, sl
 8003230:	ebb2 0801 	subs.w	r8, r2, r1
 8003234:	4659      	mov	r1, fp
 8003236:	eb63 0901 	sbc.w	r9, r3, r1
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800324a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800324e:	4690      	mov	r8, r2
 8003250:	4699      	mov	r9, r3
 8003252:	4623      	mov	r3, r4
 8003254:	eb18 0303 	adds.w	r3, r8, r3
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	462b      	mov	r3, r5
 800325c:	eb49 0303 	adc.w	r3, r9, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800326e:	4629      	mov	r1, r5
 8003270:	024b      	lsls	r3, r1, #9
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003278:	4621      	mov	r1, r4
 800327a:	024a      	lsls	r2, r1, #9
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800328c:	f7fd f808 	bl	80002a0 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	e058      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	2200      	movs	r2, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	4611      	mov	r1, r2
 80032a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	2300      	movs	r3, #0
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0159      	lsls	r1, r3, #5
 80032c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c6:	0150      	lsls	r0, r2, #5
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4641      	mov	r1, r8
 80032ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032ec:	ebb2 040a 	subs.w	r4, r2, sl
 80032f0:	eb63 050b 	sbc.w	r5, r3, fp
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	61fa      	str	r2, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	f7fc ffae 	bl	80002a0 <__aeabi_uldivmod>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4613      	mov	r3, r2
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0x200>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	3301      	adds	r3, #1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800335c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003366:	e002      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetSysClockFreq+0x204>)
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800336c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003370:	4618      	mov	r0, r3
 8003372:	3750      	adds	r7, #80	; 0x50
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	00f42400 	.word	0x00f42400
 8003384:	007a1200 	.word	0x007a1200

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000058 	.word	0x20000058

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033a4:	f7ff fff0 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	0a9b      	lsrs	r3, r3, #10
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40023800 	.word	0x40023800
 80033c4:	080048a0 	.word	0x080048a0

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033cc:	f7ff ffdc 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0b5b      	lsrs	r3, r3, #13
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	; (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	080048a0 	.word	0x080048a0

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e03f      	b.n	8003482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff faa8 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f929 	bl	800368c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d17c      	bne.n	80035a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x2c>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e075      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x3e>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e06e      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034de:	f7fd ff17 	bl	8001310 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x82>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800351c:	e02a      	b.n	8003574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f840 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e036      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1cf      	bne.n	800351e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f810 	bl	80035ae <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e006      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b090      	sub	sp, #64	; 0x40
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035be:	e050      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c6:	d04c      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <UART_WaitOnFlagUntilTimeout+0x30>
 80035ce:	f7fd fe9f 	bl	8001310 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035da:	429a      	cmp	r2, r3
 80035dc:	d241      	bcs.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035fe:	637a      	str	r2, [r7, #52]	; 0x34
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	613b      	str	r3, [r7, #16]
   return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003632:	623a      	str	r2, [r7, #32]
 8003634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	69f9      	ldr	r1, [r7, #28]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e5      	bne.n	8003612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00f      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d09f      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3740      	adds	r7, #64	; 0x40
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800368c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003690:	b0c0      	sub	sp, #256	; 0x100
 8003692:	af00      	add	r7, sp, #0
 8003694:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	ea40 0301 	orr.w	r3, r0, r1
 80036b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036e4:	f021 010c 	bic.w	r1, r1, #12
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036f2:	430b      	orrs	r3, r1
 80036f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	6999      	ldr	r1, [r3, #24]
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	ea40 0301 	orr.w	r3, r0, r1
 8003712:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b8f      	ldr	r3, [pc, #572]	; (8003958 <UART_SetConfig+0x2cc>)
 800371c:	429a      	cmp	r2, r3
 800371e:	d005      	beq.n	800372c <UART_SetConfig+0xa0>
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4b8d      	ldr	r3, [pc, #564]	; (800395c <UART_SetConfig+0x2d0>)
 8003728:	429a      	cmp	r2, r3
 800372a:	d104      	bne.n	8003736 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7ff fe4c 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 8003730:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003734:	e003      	b.n	800373e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003736:	f7ff fe33 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 800373a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003748:	f040 810c 	bne.w	8003964 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800374c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003756:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800375a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	1891      	adds	r1, r2, r2
 8003764:	65b9      	str	r1, [r7, #88]	; 0x58
 8003766:	415b      	adcs	r3, r3
 8003768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800376a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800376e:	4621      	mov	r1, r4
 8003770:	eb12 0801 	adds.w	r8, r2, r1
 8003774:	4629      	mov	r1, r5
 8003776:	eb43 0901 	adc.w	r9, r3, r1
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800378a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800378e:	4690      	mov	r8, r2
 8003790:	4699      	mov	r9, r3
 8003792:	4623      	mov	r3, r4
 8003794:	eb18 0303 	adds.w	r3, r8, r3
 8003798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800379c:	462b      	mov	r3, r5
 800379e:	eb49 0303 	adc.w	r3, r9, r3
 80037a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037ba:	460b      	mov	r3, r1
 80037bc:	18db      	adds	r3, r3, r3
 80037be:	653b      	str	r3, [r7, #80]	; 0x50
 80037c0:	4613      	mov	r3, r2
 80037c2:	eb42 0303 	adc.w	r3, r2, r3
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
 80037c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037d0:	f7fc fd66 	bl	80002a0 <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4b61      	ldr	r3, [pc, #388]	; (8003960 <UART_SetConfig+0x2d4>)
 80037da:	fba3 2302 	umull	r2, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	011c      	lsls	r4, r3, #4
 80037e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037f4:	4642      	mov	r2, r8
 80037f6:	464b      	mov	r3, r9
 80037f8:	1891      	adds	r1, r2, r2
 80037fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80037fc:	415b      	adcs	r3, r3
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003804:	4641      	mov	r1, r8
 8003806:	eb12 0a01 	adds.w	sl, r2, r1
 800380a:	4649      	mov	r1, r9
 800380c:	eb43 0b01 	adc.w	fp, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800381c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003824:	4692      	mov	sl, r2
 8003826:	469b      	mov	fp, r3
 8003828:	4643      	mov	r3, r8
 800382a:	eb1a 0303 	adds.w	r3, sl, r3
 800382e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003832:	464b      	mov	r3, r9
 8003834:	eb4b 0303 	adc.w	r3, fp, r3
 8003838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003848:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800384c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003850:	460b      	mov	r3, r1
 8003852:	18db      	adds	r3, r3, r3
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
 8003856:	4613      	mov	r3, r2
 8003858:	eb42 0303 	adc.w	r3, r2, r3
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
 800385e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003862:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003866:	f7fc fd1b 	bl	80002a0 <__aeabi_uldivmod>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4611      	mov	r1, r2
 8003870:	4b3b      	ldr	r3, [pc, #236]	; (8003960 <UART_SetConfig+0x2d4>)
 8003872:	fba3 2301 	umull	r2, r3, r3, r1
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2264      	movs	r2, #100	; 0x64
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	1acb      	subs	r3, r1, r3
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <UART_SetConfig+0x2d4>)
 8003888:	fba3 2302 	umull	r2, r3, r3, r2
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003894:	441c      	add	r4, r3
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80038b0:	415b      	adcs	r3, r3
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038b8:	4641      	mov	r1, r8
 80038ba:	1851      	adds	r1, r2, r1
 80038bc:	6339      	str	r1, [r7, #48]	; 0x30
 80038be:	4649      	mov	r1, r9
 80038c0:	414b      	adcs	r3, r1
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038d0:	4659      	mov	r1, fp
 80038d2:	00cb      	lsls	r3, r1, #3
 80038d4:	4651      	mov	r1, sl
 80038d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038da:	4651      	mov	r1, sl
 80038dc:	00ca      	lsls	r2, r1, #3
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	4642      	mov	r2, r8
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038ec:	464b      	mov	r3, r9
 80038ee:	460a      	mov	r2, r1
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003904:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800390c:	460b      	mov	r3, r1
 800390e:	18db      	adds	r3, r3, r3
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
 8003912:	4613      	mov	r3, r2
 8003914:	eb42 0303 	adc.w	r3, r2, r3
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800391e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003922:	f7fc fcbd 	bl	80002a0 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <UART_SetConfig+0x2d4>)
 800392c:	fba3 1302 	umull	r1, r3, r3, r2
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	2164      	movs	r1, #100	; 0x64
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	3332      	adds	r3, #50	; 0x32
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <UART_SetConfig+0x2d4>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4422      	add	r2, r4
 8003952:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003954:	e105      	b.n	8003b62 <UART_SetConfig+0x4d6>
 8003956:	bf00      	nop
 8003958:	40011000 	.word	0x40011000
 800395c:	40011400 	.word	0x40011400
 8003960:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003968:	2200      	movs	r2, #0
 800396a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800396e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003976:	4642      	mov	r2, r8
 8003978:	464b      	mov	r3, r9
 800397a:	1891      	adds	r1, r2, r2
 800397c:	6239      	str	r1, [r7, #32]
 800397e:	415b      	adcs	r3, r3
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003986:	4641      	mov	r1, r8
 8003988:	1854      	adds	r4, r2, r1
 800398a:	4649      	mov	r1, r9
 800398c:	eb43 0501 	adc.w	r5, r3, r1
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	00eb      	lsls	r3, r5, #3
 800399a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800399e:	00e2      	lsls	r2, r4, #3
 80039a0:	4614      	mov	r4, r2
 80039a2:	461d      	mov	r5, r3
 80039a4:	4643      	mov	r3, r8
 80039a6:	18e3      	adds	r3, r4, r3
 80039a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039ac:	464b      	mov	r3, r9
 80039ae:	eb45 0303 	adc.w	r3, r5, r3
 80039b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039d2:	4629      	mov	r1, r5
 80039d4:	008b      	lsls	r3, r1, #2
 80039d6:	4621      	mov	r1, r4
 80039d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039dc:	4621      	mov	r1, r4
 80039de:	008a      	lsls	r2, r1, #2
 80039e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039e4:	f7fc fc5c 	bl	80002a0 <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4b60      	ldr	r3, [pc, #384]	; (8003b70 <UART_SetConfig+0x4e4>)
 80039ee:	fba3 2302 	umull	r2, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	011c      	lsls	r4, r3, #4
 80039f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a08:	4642      	mov	r2, r8
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	1891      	adds	r1, r2, r2
 8003a0e:	61b9      	str	r1, [r7, #24]
 8003a10:	415b      	adcs	r3, r3
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a18:	4641      	mov	r1, r8
 8003a1a:	1851      	adds	r1, r2, r1
 8003a1c:	6139      	str	r1, [r7, #16]
 8003a1e:	4649      	mov	r1, r9
 8003a20:	414b      	adcs	r3, r1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a30:	4659      	mov	r1, fp
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4651      	mov	r1, sl
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4651      	mov	r1, sl
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4642      	mov	r2, r8
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	460a      	mov	r2, r1
 8003a50:	eb42 0303 	adc.w	r3, r2, r3
 8003a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a70:	4649      	mov	r1, r9
 8003a72:	008b      	lsls	r3, r1, #2
 8003a74:	4641      	mov	r1, r8
 8003a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	008a      	lsls	r2, r1, #2
 8003a7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a82:	f7fc fc0d 	bl	80002a0 <__aeabi_uldivmod>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4b39      	ldr	r3, [pc, #228]	; (8003b70 <UART_SetConfig+0x4e4>)
 8003a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	2164      	movs	r1, #100	; 0x64
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	3332      	adds	r3, #50	; 0x32
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <UART_SetConfig+0x4e4>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aaa:	441c      	add	r4, r3
 8003aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ab4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ab6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aba:	4642      	mov	r2, r8
 8003abc:	464b      	mov	r3, r9
 8003abe:	1891      	adds	r1, r2, r2
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	415b      	adcs	r3, r3
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aca:	4641      	mov	r1, r8
 8003acc:	1851      	adds	r1, r2, r1
 8003ace:	6039      	str	r1, [r7, #0]
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	414b      	adcs	r3, r1
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ae2:	4659      	mov	r1, fp
 8003ae4:	00cb      	lsls	r3, r1, #3
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aec:	4651      	mov	r1, sl
 8003aee:	00ca      	lsls	r2, r1, #3
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	4603      	mov	r3, r0
 8003af6:	4642      	mov	r2, r8
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003afc:	464b      	mov	r3, r9
 8003afe:	460a      	mov	r2, r1
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b10:	667a      	str	r2, [r7, #100]	; 0x64
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b1e:	4649      	mov	r1, r9
 8003b20:	008b      	lsls	r3, r1, #2
 8003b22:	4641      	mov	r1, r8
 8003b24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b28:	4641      	mov	r1, r8
 8003b2a:	008a      	lsls	r2, r1, #2
 8003b2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b30:	f7fc fbb6 	bl	80002a0 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <UART_SetConfig+0x4e4>)
 8003b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2164      	movs	r1, #100	; 0x64
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	; 0x32
 8003b4c:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <UART_SetConfig+0x4e4>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 020f 	and.w	r2, r3, #15
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4422      	add	r2, r4
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	bf00      	nop
 8003b64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6e:	bf00      	nop
 8003b70:	51eb851f 	.word	0x51eb851f

08003b74 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8003b7a:	f7fd fb69 	bl	8001250 <HAL_Init>

	SystemClock_Config();
 8003b7e:	f000 f82d 	bl	8003bdc <SystemClock_Config>
	I2C_I2C1_Init();
 8003b82:	f000 f8ad 	bl	8003ce0 <I2C_I2C1_Init>
	uartInit();
 8003b86:	f7fd f9c3 	bl	8000f10 <uartInit>
	RTC_init();
 8003b8a:	f7fc fd0b 	bl	80005a4 <RTC_init>
	GPIO_init();
 8003b8e:	f7fd fa11 	bl	8000fb4 <GPIO_init>
	delayInit(&debounce, button_delay);
 8003b92:	21c8      	movs	r1, #200	; 0xc8
 8003b94:	4810      	ldr	r0, [pc, #64]	; (8003bd8 <main+0x64>)
 8003b96:	f7fd f981 	bl	8000e9c <delayInit>
	/* Infinite loop */

	char tecla = '\0';
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	71fb      	strb	r3, [r7, #7]
	while(1){

	//Se realiza una lectura del teclado 4x4 en intervalos fijos (button delay),
    //con el fin de hacer debounce y al mismo tiempo limitar la tasa de envíos de mensajes
	//por UART. Cada intervalo envía un comando al FSM del RTC
	if(delayRead(&debounce)){
 8003b9e:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <main+0x64>)
 8003ba0:	f7fd f98d 	bl	8000ebe <delayRead>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f9      	beq.n	8003b9e <main+0x2a>
		if(PressedKey_4x4() == tecla){
 8003baa:	f7fd fa45 	bl	8001038 <PressedKey_4x4>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d106      	bne.n	8003bc6 <main+0x52>
			RTC_estado(tecla);
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fc fd12 	bl	80005e4 <RTC_estado>
			tecla = '\0';
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	71fb      	strb	r3, [r7, #7]
 8003bc4:	e7eb      	b.n	8003b9e <main+0x2a>
		}
		else{
			tecla = PressedKey_4x4();
 8003bc6:	f7fd fa37 	bl	8001038 <PressedKey_4x4>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
			RTC_estado('\0');
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fc fd08 	bl	80005e4 <RTC_estado>
	if(delayRead(&debounce)){
 8003bd4:	e7e3      	b.n	8003b9e <main+0x2a>
 8003bd6:	bf00      	nop
 8003bd8:	200001bc 	.word	0x200001bc

08003bdc <SystemClock_Config>:
 * @param  None
 * @retval None
 */

static void SystemClock_Config(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b094      	sub	sp, #80	; 0x50
 8003be0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	611a      	str	r2, [r3, #16]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	2230      	movs	r2, #48	; 0x30
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f952 	bl	8003ea4 <memset>

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <SystemClock_Config+0xfc>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4a33      	ldr	r2, [pc, #204]	; (8003cd8 <SystemClock_Config+0xfc>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c10:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <SystemClock_Config+0xfc>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <SystemClock_Config+0x100>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c28:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <SystemClock_Config+0x100>)
 8003c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <SystemClock_Config+0x100>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <SystemClock_Config+0x100>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <SystemClock_Config+0x100>)
 8003c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <SystemClock_Config+0x100>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c60:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c62:	2302      	movs	r3, #2
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003c70:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c76:	2302      	movs	r3, #2
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c7e:	f107 030c 	add.w	r3, r7, #12
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe ff1c 	bl	8002ac0 <HAL_RCC_OscConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SystemClock_Config+0xb6>
	{
		/* Initialization Error */
		Error_Handler();
 8003c8e:	f000 f8af 	bl	8003df0 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c92:	f7fe fec5 	bl	8002a20 <HAL_PWREx_EnableOverDrive>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <SystemClock_Config+0xc4>
	{
		/* Initialization Error */
		Error_Handler();
 8003c9c:	f000 f8a8 	bl	8003df0 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003ca0:	230f      	movs	r3, #15
 8003ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cbc:	2105      	movs	r1, #5
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff f976 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <SystemClock_Config+0xf2>
	{
		/* Initialization Error */
		Error_Handler();
 8003cca:	f000 f891 	bl	8003df0 <Error_Handler>
	}
}
 8003cce:	bf00      	nop
 8003cd0:	3750      	adds	r7, #80	; 0x50
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000

08003ce0 <I2C_I2C1_Init>:

static void I2C_I2C1_Init(){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <I2C_I2C1_Init+0x78>)
 8003ce8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <I2C_I2C1_Init+0x7c>)
 8003cee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cfc:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d02:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d1c:	480d      	ldr	r0, [pc, #52]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d1e:	f7fd fdeb 	bl	80018f8 <HAL_I2C_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003d28:	f000 f862 	bl	8003df0 <Error_Handler>
	}

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4809      	ldr	r0, [pc, #36]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d30:	f7fe fda1 	bl	8002876 <HAL_I2CEx_ConfigAnalogFilter>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <I2C_I2C1_Init+0x5e>
	  {
	    Error_Handler();
 8003d3a:	f000 f859 	bl	8003df0 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4804      	ldr	r0, [pc, #16]	; (8003d54 <I2C_I2C1_Init+0x74>)
 8003d42:	f7fe fdd4 	bl	80028ee <HAL_I2CEx_ConfigDigitalFilter>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <I2C_I2C1_Init+0x70>
	  {
	    Error_Handler();
 8003d4c:	f000 f850 	bl	8003df0 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

	}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000168 	.word	0x20000168
 8003d58:	40005400 	.word	0x40005400
 8003d5c:	000186a0 	.word	0x000186a0

08003d60 <HAL_I2C_MspInit>:


void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <HAL_I2C_MspInit+0x84>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12c      	bne.n	8003ddc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003d8c:	f043 0302 	orr.w	r3, r3, #2
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003d9e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003da4:	2312      	movs	r3, #18
 8003da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dac:	2303      	movs	r3, #3
 8003dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003db0:	2304      	movs	r3, #4
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	4619      	mov	r1, r3
 8003dba:	480c      	ldr	r0, [pc, #48]	; (8003dec <HAL_I2C_MspInit+0x8c>)
 8003dbc:	f7fd fbbe 	bl	800153c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dce:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_I2C_MspInit+0x88>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40005400 	.word	0x40005400
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40020400 	.word	0x40020400

08003df0 <Error_Handler>:
 * @retval None
 */


static void Error_Handler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003df4:	2001      	movs	r0, #1
 8003df6:	f7fd f977 	bl	80010e8 <BSP_LED_On>
	while (1)
 8003dfa:	e7fe      	b.n	8003dfa <Error_Handler+0xa>

08003dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e34 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e02:	e003      	b.n	8003e0c <LoopCopyDataInit>

08003e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e0a:	3104      	adds	r1, #4

08003e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e0c:	480b      	ldr	r0, [pc, #44]	; (8003e3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e14:	d3f6      	bcc.n	8003e04 <CopyDataInit>
  ldr  r2, =_sbss
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e18:	e002      	b.n	8003e20 <LoopFillZerobss>

08003e1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e1c:	f842 3b04 	str.w	r3, [r2], #4

08003e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e24:	d3f9      	bcc.n	8003e1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e26:	f7fd f979 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e2a:	f000 f817 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e2e:	f7ff fea1 	bl	8003b74 <main>
  bx  lr    
 8003e32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e34:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003e38:	080048ec 	.word	0x080048ec
  ldr  r0, =_sdata
 8003e3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e40:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8003e44:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8003e48:	200001d8 	.word	0x200001d8

08003e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e4c:	e7fe      	b.n	8003e4c <ADC_IRQHandler>
	...

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000064 	.word	0x20000064

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4d0d      	ldr	r5, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1b64      	subs	r4, r4, r5
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2600      	movs	r6, #0
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4d0b      	ldr	r5, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 fc8e 	bl	8004790 <_init>
 8003e74:	1b64      	subs	r4, r4, r5
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2600      	movs	r6, #0
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	080048e4 	.word	0x080048e4
 8003e98:	080048e4 	.word	0x080048e4
 8003e9c:	080048e4 	.word	0x080048e4
 8003ea0:	080048e8 	.word	0x080048e8

08003ea4 <memset>:
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d100      	bne.n	8003eae <memset+0xa>
 8003eac:	4770      	bx	lr
 8003eae:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb2:	e7f9      	b.n	8003ea8 <memset+0x4>

08003eb4 <siprintf>:
 8003eb4:	b40e      	push	{r1, r2, r3}
 8003eb6:	b500      	push	{lr}
 8003eb8:	b09c      	sub	sp, #112	; 0x70
 8003eba:	ab1d      	add	r3, sp, #116	; 0x74
 8003ebc:	9002      	str	r0, [sp, #8]
 8003ebe:	9006      	str	r0, [sp, #24]
 8003ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ec4:	4809      	ldr	r0, [pc, #36]	; (8003eec <siprintf+0x38>)
 8003ec6:	9107      	str	r1, [sp, #28]
 8003ec8:	9104      	str	r1, [sp, #16]
 8003eca:	4909      	ldr	r1, [pc, #36]	; (8003ef0 <siprintf+0x3c>)
 8003ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ed0:	9105      	str	r1, [sp, #20]
 8003ed2:	6800      	ldr	r0, [r0, #0]
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	a902      	add	r1, sp, #8
 8003ed8:	f000 f868 	bl	8003fac <_svfiprintf_r>
 8003edc:	9b02      	ldr	r3, [sp, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	b01c      	add	sp, #112	; 0x70
 8003ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee8:	b003      	add	sp, #12
 8003eea:	4770      	bx	lr
 8003eec:	20000064 	.word	0x20000064
 8003ef0:	ffff0208 	.word	0xffff0208

08003ef4 <__ssputs_r>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	688e      	ldr	r6, [r1, #8]
 8003efa:	429e      	cmp	r6, r3
 8003efc:	4682      	mov	sl, r0
 8003efe:	460c      	mov	r4, r1
 8003f00:	4690      	mov	r8, r2
 8003f02:	461f      	mov	r7, r3
 8003f04:	d838      	bhi.n	8003f78 <__ssputs_r+0x84>
 8003f06:	898a      	ldrh	r2, [r1, #12]
 8003f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f0c:	d032      	beq.n	8003f74 <__ssputs_r+0x80>
 8003f0e:	6825      	ldr	r5, [r4, #0]
 8003f10:	6909      	ldr	r1, [r1, #16]
 8003f12:	eba5 0901 	sub.w	r9, r5, r1
 8003f16:	6965      	ldr	r5, [r4, #20]
 8003f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f20:	3301      	adds	r3, #1
 8003f22:	444b      	add	r3, r9
 8003f24:	106d      	asrs	r5, r5, #1
 8003f26:	429d      	cmp	r5, r3
 8003f28:	bf38      	it	cc
 8003f2a:	461d      	movcc	r5, r3
 8003f2c:	0553      	lsls	r3, r2, #21
 8003f2e:	d531      	bpl.n	8003f94 <__ssputs_r+0xa0>
 8003f30:	4629      	mov	r1, r5
 8003f32:	f000 fb63 	bl	80045fc <_malloc_r>
 8003f36:	4606      	mov	r6, r0
 8003f38:	b950      	cbnz	r0, 8003f50 <__ssputs_r+0x5c>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	f8ca 3000 	str.w	r3, [sl]
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f46:	81a3      	strh	r3, [r4, #12]
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f50:	6921      	ldr	r1, [r4, #16]
 8003f52:	464a      	mov	r2, r9
 8003f54:	f000 fabe 	bl	80044d4 <memcpy>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	6126      	str	r6, [r4, #16]
 8003f66:	6165      	str	r5, [r4, #20]
 8003f68:	444e      	add	r6, r9
 8003f6a:	eba5 0509 	sub.w	r5, r5, r9
 8003f6e:	6026      	str	r6, [r4, #0]
 8003f70:	60a5      	str	r5, [r4, #8]
 8003f72:	463e      	mov	r6, r7
 8003f74:	42be      	cmp	r6, r7
 8003f76:	d900      	bls.n	8003f7a <__ssputs_r+0x86>
 8003f78:	463e      	mov	r6, r7
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4641      	mov	r1, r8
 8003f80:	f000 fab6 	bl	80044f0 <memmove>
 8003f84:	68a3      	ldr	r3, [r4, #8]
 8003f86:	1b9b      	subs	r3, r3, r6
 8003f88:	60a3      	str	r3, [r4, #8]
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	4433      	add	r3, r6
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	2000      	movs	r0, #0
 8003f92:	e7db      	b.n	8003f4c <__ssputs_r+0x58>
 8003f94:	462a      	mov	r2, r5
 8003f96:	f000 fba5 	bl	80046e4 <_realloc_r>
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d1e1      	bne.n	8003f64 <__ssputs_r+0x70>
 8003fa0:	6921      	ldr	r1, [r4, #16]
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f000 fabe 	bl	8004524 <_free_r>
 8003fa8:	e7c7      	b.n	8003f3a <__ssputs_r+0x46>
	...

08003fac <_svfiprintf_r>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	4698      	mov	r8, r3
 8003fb2:	898b      	ldrh	r3, [r1, #12]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	b09d      	sub	sp, #116	; 0x74
 8003fb8:	4607      	mov	r7, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	d50e      	bpl.n	8003fde <_svfiprintf_r+0x32>
 8003fc0:	690b      	ldr	r3, [r1, #16]
 8003fc2:	b963      	cbnz	r3, 8003fde <_svfiprintf_r+0x32>
 8003fc4:	2140      	movs	r1, #64	; 0x40
 8003fc6:	f000 fb19 	bl	80045fc <_malloc_r>
 8003fca:	6028      	str	r0, [r5, #0]
 8003fcc:	6128      	str	r0, [r5, #16]
 8003fce:	b920      	cbnz	r0, 8003fda <_svfiprintf_r+0x2e>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd8:	e0d1      	b.n	800417e <_svfiprintf_r+0x1d2>
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	616b      	str	r3, [r5, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fec:	2330      	movs	r3, #48	; 0x30
 8003fee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004198 <_svfiprintf_r+0x1ec>
 8003ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ff6:	f04f 0901 	mov.w	r9, #1
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004002:	b10a      	cbz	r2, 8004008 <_svfiprintf_r+0x5c>
 8004004:	2a25      	cmp	r2, #37	; 0x25
 8004006:	d1f9      	bne.n	8003ffc <_svfiprintf_r+0x50>
 8004008:	ebba 0b04 	subs.w	fp, sl, r4
 800400c:	d00b      	beq.n	8004026 <_svfiprintf_r+0x7a>
 800400e:	465b      	mov	r3, fp
 8004010:	4622      	mov	r2, r4
 8004012:	4629      	mov	r1, r5
 8004014:	4638      	mov	r0, r7
 8004016:	f7ff ff6d 	bl	8003ef4 <__ssputs_r>
 800401a:	3001      	adds	r0, #1
 800401c:	f000 80aa 	beq.w	8004174 <_svfiprintf_r+0x1c8>
 8004020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004022:	445a      	add	r2, fp
 8004024:	9209      	str	r2, [sp, #36]	; 0x24
 8004026:	f89a 3000 	ldrb.w	r3, [sl]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80a2 	beq.w	8004174 <_svfiprintf_r+0x1c8>
 8004030:	2300      	movs	r3, #0
 8004032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800403a:	f10a 0a01 	add.w	sl, sl, #1
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	9307      	str	r3, [sp, #28]
 8004042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004046:	931a      	str	r3, [sp, #104]	; 0x68
 8004048:	4654      	mov	r4, sl
 800404a:	2205      	movs	r2, #5
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	4851      	ldr	r0, [pc, #324]	; (8004198 <_svfiprintf_r+0x1ec>)
 8004052:	f7fc f8d5 	bl	8000200 <memchr>
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	b9d8      	cbnz	r0, 8004092 <_svfiprintf_r+0xe6>
 800405a:	06d0      	lsls	r0, r2, #27
 800405c:	bf44      	itt	mi
 800405e:	2320      	movmi	r3, #32
 8004060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004064:	0711      	lsls	r1, r2, #28
 8004066:	bf44      	itt	mi
 8004068:	232b      	movmi	r3, #43	; 0x2b
 800406a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406e:	f89a 3000 	ldrb.w	r3, [sl]
 8004072:	2b2a      	cmp	r3, #42	; 0x2a
 8004074:	d015      	beq.n	80040a2 <_svfiprintf_r+0xf6>
 8004076:	9a07      	ldr	r2, [sp, #28]
 8004078:	4654      	mov	r4, sl
 800407a:	2000      	movs	r0, #0
 800407c:	f04f 0c0a 	mov.w	ip, #10
 8004080:	4621      	mov	r1, r4
 8004082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004086:	3b30      	subs	r3, #48	; 0x30
 8004088:	2b09      	cmp	r3, #9
 800408a:	d94e      	bls.n	800412a <_svfiprintf_r+0x17e>
 800408c:	b1b0      	cbz	r0, 80040bc <_svfiprintf_r+0x110>
 800408e:	9207      	str	r2, [sp, #28]
 8004090:	e014      	b.n	80040bc <_svfiprintf_r+0x110>
 8004092:	eba0 0308 	sub.w	r3, r0, r8
 8004096:	fa09 f303 	lsl.w	r3, r9, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	46a2      	mov	sl, r4
 80040a0:	e7d2      	b.n	8004048 <_svfiprintf_r+0x9c>
 80040a2:	9b03      	ldr	r3, [sp, #12]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	9103      	str	r1, [sp, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfbb      	ittet	lt
 80040ae:	425b      	neglt	r3, r3
 80040b0:	f042 0202 	orrlt.w	r2, r2, #2
 80040b4:	9307      	strge	r3, [sp, #28]
 80040b6:	9307      	strlt	r3, [sp, #28]
 80040b8:	bfb8      	it	lt
 80040ba:	9204      	strlt	r2, [sp, #16]
 80040bc:	7823      	ldrb	r3, [r4, #0]
 80040be:	2b2e      	cmp	r3, #46	; 0x2e
 80040c0:	d10c      	bne.n	80040dc <_svfiprintf_r+0x130>
 80040c2:	7863      	ldrb	r3, [r4, #1]
 80040c4:	2b2a      	cmp	r3, #42	; 0x2a
 80040c6:	d135      	bne.n	8004134 <_svfiprintf_r+0x188>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	9203      	str	r2, [sp, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bfb8      	it	lt
 80040d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040d8:	3402      	adds	r4, #2
 80040da:	9305      	str	r3, [sp, #20]
 80040dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041a8 <_svfiprintf_r+0x1fc>
 80040e0:	7821      	ldrb	r1, [r4, #0]
 80040e2:	2203      	movs	r2, #3
 80040e4:	4650      	mov	r0, sl
 80040e6:	f7fc f88b 	bl	8000200 <memchr>
 80040ea:	b140      	cbz	r0, 80040fe <_svfiprintf_r+0x152>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	eba0 000a 	sub.w	r0, r0, sl
 80040f2:	fa03 f000 	lsl.w	r0, r3, r0
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	4303      	orrs	r3, r0
 80040fa:	3401      	adds	r4, #1
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004102:	4826      	ldr	r0, [pc, #152]	; (800419c <_svfiprintf_r+0x1f0>)
 8004104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004108:	2206      	movs	r2, #6
 800410a:	f7fc f879 	bl	8000200 <memchr>
 800410e:	2800      	cmp	r0, #0
 8004110:	d038      	beq.n	8004184 <_svfiprintf_r+0x1d8>
 8004112:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <_svfiprintf_r+0x1f4>)
 8004114:	bb1b      	cbnz	r3, 800415e <_svfiprintf_r+0x1b2>
 8004116:	9b03      	ldr	r3, [sp, #12]
 8004118:	3307      	adds	r3, #7
 800411a:	f023 0307 	bic.w	r3, r3, #7
 800411e:	3308      	adds	r3, #8
 8004120:	9303      	str	r3, [sp, #12]
 8004122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004124:	4433      	add	r3, r6
 8004126:	9309      	str	r3, [sp, #36]	; 0x24
 8004128:	e767      	b.n	8003ffa <_svfiprintf_r+0x4e>
 800412a:	fb0c 3202 	mla	r2, ip, r2, r3
 800412e:	460c      	mov	r4, r1
 8004130:	2001      	movs	r0, #1
 8004132:	e7a5      	b.n	8004080 <_svfiprintf_r+0xd4>
 8004134:	2300      	movs	r3, #0
 8004136:	3401      	adds	r4, #1
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	4619      	mov	r1, r3
 800413c:	f04f 0c0a 	mov.w	ip, #10
 8004140:	4620      	mov	r0, r4
 8004142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004146:	3a30      	subs	r2, #48	; 0x30
 8004148:	2a09      	cmp	r2, #9
 800414a:	d903      	bls.n	8004154 <_svfiprintf_r+0x1a8>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0c5      	beq.n	80040dc <_svfiprintf_r+0x130>
 8004150:	9105      	str	r1, [sp, #20]
 8004152:	e7c3      	b.n	80040dc <_svfiprintf_r+0x130>
 8004154:	fb0c 2101 	mla	r1, ip, r1, r2
 8004158:	4604      	mov	r4, r0
 800415a:	2301      	movs	r3, #1
 800415c:	e7f0      	b.n	8004140 <_svfiprintf_r+0x194>
 800415e:	ab03      	add	r3, sp, #12
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	462a      	mov	r2, r5
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <_svfiprintf_r+0x1f8>)
 8004166:	a904      	add	r1, sp, #16
 8004168:	4638      	mov	r0, r7
 800416a:	f3af 8000 	nop.w
 800416e:	1c42      	adds	r2, r0, #1
 8004170:	4606      	mov	r6, r0
 8004172:	d1d6      	bne.n	8004122 <_svfiprintf_r+0x176>
 8004174:	89ab      	ldrh	r3, [r5, #12]
 8004176:	065b      	lsls	r3, r3, #25
 8004178:	f53f af2c 	bmi.w	8003fd4 <_svfiprintf_r+0x28>
 800417c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800417e:	b01d      	add	sp, #116	; 0x74
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004184:	ab03      	add	r3, sp, #12
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	462a      	mov	r2, r5
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <_svfiprintf_r+0x1f8>)
 800418c:	a904      	add	r1, sp, #16
 800418e:	4638      	mov	r0, r7
 8004190:	f000 f87a 	bl	8004288 <_printf_i>
 8004194:	e7eb      	b.n	800416e <_svfiprintf_r+0x1c2>
 8004196:	bf00      	nop
 8004198:	080048a8 	.word	0x080048a8
 800419c:	080048b2 	.word	0x080048b2
 80041a0:	00000000 	.word	0x00000000
 80041a4:	08003ef5 	.word	0x08003ef5
 80041a8:	080048ae 	.word	0x080048ae

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4616      	mov	r6, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041bc:	4293      	cmp	r3, r2
 80041be:	bfb8      	it	lt
 80041c0:	4613      	movlt	r3, r2
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c8:	4607      	mov	r7, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	b10a      	cbz	r2, 80041d2 <_printf_common+0x26>
 80041ce:	3301      	adds	r3, #1
 80041d0:	6033      	str	r3, [r6, #0]
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	0699      	lsls	r1, r3, #26
 80041d6:	bf42      	ittt	mi
 80041d8:	6833      	ldrmi	r3, [r6, #0]
 80041da:	3302      	addmi	r3, #2
 80041dc:	6033      	strmi	r3, [r6, #0]
 80041de:	6825      	ldr	r5, [r4, #0]
 80041e0:	f015 0506 	ands.w	r5, r5, #6
 80041e4:	d106      	bne.n	80041f4 <_printf_common+0x48>
 80041e6:	f104 0a19 	add.w	sl, r4, #25
 80041ea:	68e3      	ldr	r3, [r4, #12]
 80041ec:	6832      	ldr	r2, [r6, #0]
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	dc26      	bgt.n	8004242 <_printf_common+0x96>
 80041f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041f8:	1e13      	subs	r3, r2, #0
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	bf18      	it	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	0692      	lsls	r2, r2, #26
 8004202:	d42b      	bmi.n	800425c <_printf_common+0xb0>
 8004204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004208:	4649      	mov	r1, r9
 800420a:	4638      	mov	r0, r7
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d01e      	beq.n	8004250 <_printf_common+0xa4>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	68e5      	ldr	r5, [r4, #12]
 8004216:	6832      	ldr	r2, [r6, #0]
 8004218:	f003 0306 	and.w	r3, r3, #6
 800421c:	2b04      	cmp	r3, #4
 800421e:	bf08      	it	eq
 8004220:	1aad      	subeq	r5, r5, r2
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	6922      	ldr	r2, [r4, #16]
 8004226:	bf0c      	ite	eq
 8004228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800422c:	2500      	movne	r5, #0
 800422e:	4293      	cmp	r3, r2
 8004230:	bfc4      	itt	gt
 8004232:	1a9b      	subgt	r3, r3, r2
 8004234:	18ed      	addgt	r5, r5, r3
 8004236:	2600      	movs	r6, #0
 8004238:	341a      	adds	r4, #26
 800423a:	42b5      	cmp	r5, r6
 800423c:	d11a      	bne.n	8004274 <_printf_common+0xc8>
 800423e:	2000      	movs	r0, #0
 8004240:	e008      	b.n	8004254 <_printf_common+0xa8>
 8004242:	2301      	movs	r3, #1
 8004244:	4652      	mov	r2, sl
 8004246:	4649      	mov	r1, r9
 8004248:	4638      	mov	r0, r7
 800424a:	47c0      	blx	r8
 800424c:	3001      	adds	r0, #1
 800424e:	d103      	bne.n	8004258 <_printf_common+0xac>
 8004250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004258:	3501      	adds	r5, #1
 800425a:	e7c6      	b.n	80041ea <_printf_common+0x3e>
 800425c:	18e1      	adds	r1, r4, r3
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	2030      	movs	r0, #48	; 0x30
 8004262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004266:	4422      	add	r2, r4
 8004268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800426c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004270:	3302      	adds	r3, #2
 8004272:	e7c7      	b.n	8004204 <_printf_common+0x58>
 8004274:	2301      	movs	r3, #1
 8004276:	4622      	mov	r2, r4
 8004278:	4649      	mov	r1, r9
 800427a:	4638      	mov	r0, r7
 800427c:	47c0      	blx	r8
 800427e:	3001      	adds	r0, #1
 8004280:	d0e6      	beq.n	8004250 <_printf_common+0xa4>
 8004282:	3601      	adds	r6, #1
 8004284:	e7d9      	b.n	800423a <_printf_common+0x8e>
	...

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	7e0f      	ldrb	r7, [r1, #24]
 800428e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004290:	2f78      	cmp	r7, #120	; 0x78
 8004292:	4691      	mov	r9, r2
 8004294:	4680      	mov	r8, r0
 8004296:	460c      	mov	r4, r1
 8004298:	469a      	mov	sl, r3
 800429a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	; 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d8 	beq.w	800445a <_printf_i+0x1d2>
 80042aa:	2f58      	cmp	r7, #88	; 0x58
 80042ac:	f000 80a3 	beq.w	80043f6 <_printf_i+0x16e>
 80042b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a101      	add	r1, pc, #4	; (adr r1, 80042c8 <_printf_i+0x40>)
 80042c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004441 	.word	0x08004441
 80042f8:	08004365 	.word	0x08004365
 80042fc:	08004423 	.word	0x08004423
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004463 	.word	0x08004463
 800430c:	080042b1 	.word	0x080042b1
 8004310:	08004365 	.word	0x08004365
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	0800442b 	.word	0x0800442b
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e0a3      	b.n	800447c <_printf_i+0x1f4>
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	6829      	ldr	r1, [r5, #0]
 8004338:	0606      	lsls	r6, r0, #24
 800433a:	f101 0304 	add.w	r3, r1, #4
 800433e:	d50a      	bpl.n	8004356 <_printf_i+0xce>
 8004340:	680e      	ldr	r6, [r1, #0]
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	2e00      	cmp	r6, #0
 8004346:	da03      	bge.n	8004350 <_printf_i+0xc8>
 8004348:	232d      	movs	r3, #45	; 0x2d
 800434a:	4276      	negs	r6, r6
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	485e      	ldr	r0, [pc, #376]	; (80044cc <_printf_i+0x244>)
 8004352:	230a      	movs	r3, #10
 8004354:	e019      	b.n	800438a <_printf_i+0x102>
 8004356:	680e      	ldr	r6, [r1, #0]
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800435e:	bf18      	it	ne
 8004360:	b236      	sxthne	r6, r6
 8004362:	e7ef      	b.n	8004344 <_printf_i+0xbc>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	1d19      	adds	r1, r3, #4
 800436a:	6029      	str	r1, [r5, #0]
 800436c:	0601      	lsls	r1, r0, #24
 800436e:	d501      	bpl.n	8004374 <_printf_i+0xec>
 8004370:	681e      	ldr	r6, [r3, #0]
 8004372:	e002      	b.n	800437a <_printf_i+0xf2>
 8004374:	0646      	lsls	r6, r0, #25
 8004376:	d5fb      	bpl.n	8004370 <_printf_i+0xe8>
 8004378:	881e      	ldrh	r6, [r3, #0]
 800437a:	4854      	ldr	r0, [pc, #336]	; (80044cc <_printf_i+0x244>)
 800437c:	2f6f      	cmp	r7, #111	; 0x6f
 800437e:	bf0c      	ite	eq
 8004380:	2308      	moveq	r3, #8
 8004382:	230a      	movne	r3, #10
 8004384:	2100      	movs	r1, #0
 8004386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438a:	6865      	ldr	r5, [r4, #4]
 800438c:	60a5      	str	r5, [r4, #8]
 800438e:	2d00      	cmp	r5, #0
 8004390:	bfa2      	ittt	ge
 8004392:	6821      	ldrge	r1, [r4, #0]
 8004394:	f021 0104 	bicge.w	r1, r1, #4
 8004398:	6021      	strge	r1, [r4, #0]
 800439a:	b90e      	cbnz	r6, 80043a0 <_printf_i+0x118>
 800439c:	2d00      	cmp	r5, #0
 800439e:	d04d      	beq.n	800443c <_printf_i+0x1b4>
 80043a0:	4615      	mov	r5, r2
 80043a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043a6:	fb03 6711 	mls	r7, r3, r1, r6
 80043aa:	5dc7      	ldrb	r7, [r0, r7]
 80043ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b0:	4637      	mov	r7, r6
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	460e      	mov	r6, r1
 80043b6:	d9f4      	bls.n	80043a2 <_printf_i+0x11a>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d10b      	bne.n	80043d4 <_printf_i+0x14c>
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	07de      	lsls	r6, r3, #31
 80043c0:	d508      	bpl.n	80043d4 <_printf_i+0x14c>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	6861      	ldr	r1, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	bfde      	ittt	le
 80043ca:	2330      	movle	r3, #48	; 0x30
 80043cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043d4:	1b52      	subs	r2, r2, r5
 80043d6:	6122      	str	r2, [r4, #16]
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	464b      	mov	r3, r9
 80043de:	aa03      	add	r2, sp, #12
 80043e0:	4621      	mov	r1, r4
 80043e2:	4640      	mov	r0, r8
 80043e4:	f7ff fee2 	bl	80041ac <_printf_common>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d14c      	bne.n	8004486 <_printf_i+0x1fe>
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f0:	b004      	add	sp, #16
 80043f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f6:	4835      	ldr	r0, [pc, #212]	; (80044cc <_printf_i+0x244>)
 80043f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043fc:	6829      	ldr	r1, [r5, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f851 6b04 	ldr.w	r6, [r1], #4
 8004404:	6029      	str	r1, [r5, #0]
 8004406:	061d      	lsls	r5, r3, #24
 8004408:	d514      	bpl.n	8004434 <_printf_i+0x1ac>
 800440a:	07df      	lsls	r7, r3, #31
 800440c:	bf44      	itt	mi
 800440e:	f043 0320 	orrmi.w	r3, r3, #32
 8004412:	6023      	strmi	r3, [r4, #0]
 8004414:	b91e      	cbnz	r6, 800441e <_printf_i+0x196>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f023 0320 	bic.w	r3, r3, #32
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	2310      	movs	r3, #16
 8004420:	e7b0      	b.n	8004384 <_printf_i+0xfc>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	2378      	movs	r3, #120	; 0x78
 800442c:	4828      	ldr	r0, [pc, #160]	; (80044d0 <_printf_i+0x248>)
 800442e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004432:	e7e3      	b.n	80043fc <_printf_i+0x174>
 8004434:	0659      	lsls	r1, r3, #25
 8004436:	bf48      	it	mi
 8004438:	b2b6      	uxthmi	r6, r6
 800443a:	e7e6      	b.n	800440a <_printf_i+0x182>
 800443c:	4615      	mov	r5, r2
 800443e:	e7bb      	b.n	80043b8 <_printf_i+0x130>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	6826      	ldr	r6, [r4, #0]
 8004444:	6961      	ldr	r1, [r4, #20]
 8004446:	1d18      	adds	r0, r3, #4
 8004448:	6028      	str	r0, [r5, #0]
 800444a:	0635      	lsls	r5, r6, #24
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	d501      	bpl.n	8004454 <_printf_i+0x1cc>
 8004450:	6019      	str	r1, [r3, #0]
 8004452:	e002      	b.n	800445a <_printf_i+0x1d2>
 8004454:	0670      	lsls	r0, r6, #25
 8004456:	d5fb      	bpl.n	8004450 <_printf_i+0x1c8>
 8004458:	8019      	strh	r1, [r3, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	6123      	str	r3, [r4, #16]
 800445e:	4615      	mov	r5, r2
 8004460:	e7ba      	b.n	80043d8 <_printf_i+0x150>
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	1d1a      	adds	r2, r3, #4
 8004466:	602a      	str	r2, [r5, #0]
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	2100      	movs	r1, #0
 800446e:	4628      	mov	r0, r5
 8004470:	f7fb fec6 	bl	8000200 <memchr>
 8004474:	b108      	cbz	r0, 800447a <_printf_i+0x1f2>
 8004476:	1b40      	subs	r0, r0, r5
 8004478:	6060      	str	r0, [r4, #4]
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	2300      	movs	r3, #0
 8004480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004484:	e7a8      	b.n	80043d8 <_printf_i+0x150>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	462a      	mov	r2, r5
 800448a:	4649      	mov	r1, r9
 800448c:	4640      	mov	r0, r8
 800448e:	47d0      	blx	sl
 8004490:	3001      	adds	r0, #1
 8004492:	d0ab      	beq.n	80043ec <_printf_i+0x164>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	079b      	lsls	r3, r3, #30
 8004498:	d413      	bmi.n	80044c2 <_printf_i+0x23a>
 800449a:	68e0      	ldr	r0, [r4, #12]
 800449c:	9b03      	ldr	r3, [sp, #12]
 800449e:	4298      	cmp	r0, r3
 80044a0:	bfb8      	it	lt
 80044a2:	4618      	movlt	r0, r3
 80044a4:	e7a4      	b.n	80043f0 <_printf_i+0x168>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4632      	mov	r2, r6
 80044aa:	4649      	mov	r1, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	47d0      	blx	sl
 80044b0:	3001      	adds	r0, #1
 80044b2:	d09b      	beq.n	80043ec <_printf_i+0x164>
 80044b4:	3501      	adds	r5, #1
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	9903      	ldr	r1, [sp, #12]
 80044ba:	1a5b      	subs	r3, r3, r1
 80044bc:	42ab      	cmp	r3, r5
 80044be:	dcf2      	bgt.n	80044a6 <_printf_i+0x21e>
 80044c0:	e7eb      	b.n	800449a <_printf_i+0x212>
 80044c2:	2500      	movs	r5, #0
 80044c4:	f104 0619 	add.w	r6, r4, #25
 80044c8:	e7f5      	b.n	80044b6 <_printf_i+0x22e>
 80044ca:	bf00      	nop
 80044cc:	080048b9 	.word	0x080048b9
 80044d0:	080048ca 	.word	0x080048ca

080044d4 <memcpy>:
 80044d4:	440a      	add	r2, r1
 80044d6:	4291      	cmp	r1, r2
 80044d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80044dc:	d100      	bne.n	80044e0 <memcpy+0xc>
 80044de:	4770      	bx	lr
 80044e0:	b510      	push	{r4, lr}
 80044e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ea:	4291      	cmp	r1, r2
 80044ec:	d1f9      	bne.n	80044e2 <memcpy+0xe>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <memmove>:
 80044f0:	4288      	cmp	r0, r1
 80044f2:	b510      	push	{r4, lr}
 80044f4:	eb01 0402 	add.w	r4, r1, r2
 80044f8:	d902      	bls.n	8004500 <memmove+0x10>
 80044fa:	4284      	cmp	r4, r0
 80044fc:	4623      	mov	r3, r4
 80044fe:	d807      	bhi.n	8004510 <memmove+0x20>
 8004500:	1e43      	subs	r3, r0, #1
 8004502:	42a1      	cmp	r1, r4
 8004504:	d008      	beq.n	8004518 <memmove+0x28>
 8004506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800450a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800450e:	e7f8      	b.n	8004502 <memmove+0x12>
 8004510:	4402      	add	r2, r0
 8004512:	4601      	mov	r1, r0
 8004514:	428a      	cmp	r2, r1
 8004516:	d100      	bne.n	800451a <memmove+0x2a>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800451e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004522:	e7f7      	b.n	8004514 <memmove+0x24>

08004524 <_free_r>:
 8004524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004526:	2900      	cmp	r1, #0
 8004528:	d044      	beq.n	80045b4 <_free_r+0x90>
 800452a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452e:	9001      	str	r0, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f1a1 0404 	sub.w	r4, r1, #4
 8004536:	bfb8      	it	lt
 8004538:	18e4      	addlt	r4, r4, r3
 800453a:	f000 f913 	bl	8004764 <__malloc_lock>
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <_free_r+0x94>)
 8004540:	9801      	ldr	r0, [sp, #4]
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	b933      	cbnz	r3, 8004554 <_free_r+0x30>
 8004546:	6063      	str	r3, [r4, #4]
 8004548:	6014      	str	r4, [r2, #0]
 800454a:	b003      	add	sp, #12
 800454c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004550:	f000 b90e 	b.w	8004770 <__malloc_unlock>
 8004554:	42a3      	cmp	r3, r4
 8004556:	d908      	bls.n	800456a <_free_r+0x46>
 8004558:	6825      	ldr	r5, [r4, #0]
 800455a:	1961      	adds	r1, r4, r5
 800455c:	428b      	cmp	r3, r1
 800455e:	bf01      	itttt	eq
 8004560:	6819      	ldreq	r1, [r3, #0]
 8004562:	685b      	ldreq	r3, [r3, #4]
 8004564:	1949      	addeq	r1, r1, r5
 8004566:	6021      	streq	r1, [r4, #0]
 8004568:	e7ed      	b.n	8004546 <_free_r+0x22>
 800456a:	461a      	mov	r2, r3
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b10b      	cbz	r3, 8004574 <_free_r+0x50>
 8004570:	42a3      	cmp	r3, r4
 8004572:	d9fa      	bls.n	800456a <_free_r+0x46>
 8004574:	6811      	ldr	r1, [r2, #0]
 8004576:	1855      	adds	r5, r2, r1
 8004578:	42a5      	cmp	r5, r4
 800457a:	d10b      	bne.n	8004594 <_free_r+0x70>
 800457c:	6824      	ldr	r4, [r4, #0]
 800457e:	4421      	add	r1, r4
 8004580:	1854      	adds	r4, r2, r1
 8004582:	42a3      	cmp	r3, r4
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	d1e0      	bne.n	800454a <_free_r+0x26>
 8004588:	681c      	ldr	r4, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	6053      	str	r3, [r2, #4]
 800458e:	4421      	add	r1, r4
 8004590:	6011      	str	r1, [r2, #0]
 8004592:	e7da      	b.n	800454a <_free_r+0x26>
 8004594:	d902      	bls.n	800459c <_free_r+0x78>
 8004596:	230c      	movs	r3, #12
 8004598:	6003      	str	r3, [r0, #0]
 800459a:	e7d6      	b.n	800454a <_free_r+0x26>
 800459c:	6825      	ldr	r5, [r4, #0]
 800459e:	1961      	adds	r1, r4, r5
 80045a0:	428b      	cmp	r3, r1
 80045a2:	bf04      	itt	eq
 80045a4:	6819      	ldreq	r1, [r3, #0]
 80045a6:	685b      	ldreq	r3, [r3, #4]
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	bf04      	itt	eq
 80045ac:	1949      	addeq	r1, r1, r5
 80045ae:	6021      	streq	r1, [r4, #0]
 80045b0:	6054      	str	r4, [r2, #4]
 80045b2:	e7ca      	b.n	800454a <_free_r+0x26>
 80045b4:	b003      	add	sp, #12
 80045b6:	bd30      	pop	{r4, r5, pc}
 80045b8:	200001c8 	.word	0x200001c8

080045bc <sbrk_aligned>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4e0e      	ldr	r6, [pc, #56]	; (80045f8 <sbrk_aligned+0x3c>)
 80045c0:	460c      	mov	r4, r1
 80045c2:	6831      	ldr	r1, [r6, #0]
 80045c4:	4605      	mov	r5, r0
 80045c6:	b911      	cbnz	r1, 80045ce <sbrk_aligned+0x12>
 80045c8:	f000 f8bc 	bl	8004744 <_sbrk_r>
 80045cc:	6030      	str	r0, [r6, #0]
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 f8b7 	bl	8004744 <_sbrk_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d00a      	beq.n	80045f0 <sbrk_aligned+0x34>
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d007      	beq.n	80045f4 <sbrk_aligned+0x38>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 f8ac 	bl	8004744 <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d101      	bne.n	80045f4 <sbrk_aligned+0x38>
 80045f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80045f4:	4620      	mov	r0, r4
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	200001cc 	.word	0x200001cc

080045fc <_malloc_r>:
 80045fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004600:	1ccd      	adds	r5, r1, #3
 8004602:	f025 0503 	bic.w	r5, r5, #3
 8004606:	3508      	adds	r5, #8
 8004608:	2d0c      	cmp	r5, #12
 800460a:	bf38      	it	cc
 800460c:	250c      	movcc	r5, #12
 800460e:	2d00      	cmp	r5, #0
 8004610:	4607      	mov	r7, r0
 8004612:	db01      	blt.n	8004618 <_malloc_r+0x1c>
 8004614:	42a9      	cmp	r1, r5
 8004616:	d905      	bls.n	8004624 <_malloc_r+0x28>
 8004618:	230c      	movs	r3, #12
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	2600      	movs	r6, #0
 800461e:	4630      	mov	r0, r6
 8004620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004624:	4e2e      	ldr	r6, [pc, #184]	; (80046e0 <_malloc_r+0xe4>)
 8004626:	f000 f89d 	bl	8004764 <__malloc_lock>
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	461c      	mov	r4, r3
 800462e:	bb34      	cbnz	r4, 800467e <_malloc_r+0x82>
 8004630:	4629      	mov	r1, r5
 8004632:	4638      	mov	r0, r7
 8004634:	f7ff ffc2 	bl	80045bc <sbrk_aligned>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	4604      	mov	r4, r0
 800463c:	d14d      	bne.n	80046da <_malloc_r+0xde>
 800463e:	6834      	ldr	r4, [r6, #0]
 8004640:	4626      	mov	r6, r4
 8004642:	2e00      	cmp	r6, #0
 8004644:	d140      	bne.n	80046c8 <_malloc_r+0xcc>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	4631      	mov	r1, r6
 800464a:	4638      	mov	r0, r7
 800464c:	eb04 0803 	add.w	r8, r4, r3
 8004650:	f000 f878 	bl	8004744 <_sbrk_r>
 8004654:	4580      	cmp	r8, r0
 8004656:	d13a      	bne.n	80046ce <_malloc_r+0xd2>
 8004658:	6821      	ldr	r1, [r4, #0]
 800465a:	3503      	adds	r5, #3
 800465c:	1a6d      	subs	r5, r5, r1
 800465e:	f025 0503 	bic.w	r5, r5, #3
 8004662:	3508      	adds	r5, #8
 8004664:	2d0c      	cmp	r5, #12
 8004666:	bf38      	it	cc
 8004668:	250c      	movcc	r5, #12
 800466a:	4629      	mov	r1, r5
 800466c:	4638      	mov	r0, r7
 800466e:	f7ff ffa5 	bl	80045bc <sbrk_aligned>
 8004672:	3001      	adds	r0, #1
 8004674:	d02b      	beq.n	80046ce <_malloc_r+0xd2>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	442b      	add	r3, r5
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	e00e      	b.n	800469c <_malloc_r+0xa0>
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	1b52      	subs	r2, r2, r5
 8004682:	d41e      	bmi.n	80046c2 <_malloc_r+0xc6>
 8004684:	2a0b      	cmp	r2, #11
 8004686:	d916      	bls.n	80046b6 <_malloc_r+0xba>
 8004688:	1961      	adds	r1, r4, r5
 800468a:	42a3      	cmp	r3, r4
 800468c:	6025      	str	r5, [r4, #0]
 800468e:	bf18      	it	ne
 8004690:	6059      	strne	r1, [r3, #4]
 8004692:	6863      	ldr	r3, [r4, #4]
 8004694:	bf08      	it	eq
 8004696:	6031      	streq	r1, [r6, #0]
 8004698:	5162      	str	r2, [r4, r5]
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	4638      	mov	r0, r7
 800469e:	f104 060b 	add.w	r6, r4, #11
 80046a2:	f000 f865 	bl	8004770 <__malloc_unlock>
 80046a6:	f026 0607 	bic.w	r6, r6, #7
 80046aa:	1d23      	adds	r3, r4, #4
 80046ac:	1af2      	subs	r2, r6, r3
 80046ae:	d0b6      	beq.n	800461e <_malloc_r+0x22>
 80046b0:	1b9b      	subs	r3, r3, r6
 80046b2:	50a3      	str	r3, [r4, r2]
 80046b4:	e7b3      	b.n	800461e <_malloc_r+0x22>
 80046b6:	6862      	ldr	r2, [r4, #4]
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	bf0c      	ite	eq
 80046bc:	6032      	streq	r2, [r6, #0]
 80046be:	605a      	strne	r2, [r3, #4]
 80046c0:	e7ec      	b.n	800469c <_malloc_r+0xa0>
 80046c2:	4623      	mov	r3, r4
 80046c4:	6864      	ldr	r4, [r4, #4]
 80046c6:	e7b2      	b.n	800462e <_malloc_r+0x32>
 80046c8:	4634      	mov	r4, r6
 80046ca:	6876      	ldr	r6, [r6, #4]
 80046cc:	e7b9      	b.n	8004642 <_malloc_r+0x46>
 80046ce:	230c      	movs	r3, #12
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	4638      	mov	r0, r7
 80046d4:	f000 f84c 	bl	8004770 <__malloc_unlock>
 80046d8:	e7a1      	b.n	800461e <_malloc_r+0x22>
 80046da:	6025      	str	r5, [r4, #0]
 80046dc:	e7de      	b.n	800469c <_malloc_r+0xa0>
 80046de:	bf00      	nop
 80046e0:	200001c8 	.word	0x200001c8

080046e4 <_realloc_r>:
 80046e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e8:	4680      	mov	r8, r0
 80046ea:	4614      	mov	r4, r2
 80046ec:	460e      	mov	r6, r1
 80046ee:	b921      	cbnz	r1, 80046fa <_realloc_r+0x16>
 80046f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f4:	4611      	mov	r1, r2
 80046f6:	f7ff bf81 	b.w	80045fc <_malloc_r>
 80046fa:	b92a      	cbnz	r2, 8004708 <_realloc_r+0x24>
 80046fc:	f7ff ff12 	bl	8004524 <_free_r>
 8004700:	4625      	mov	r5, r4
 8004702:	4628      	mov	r0, r5
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	f000 f838 	bl	800477c <_malloc_usable_size_r>
 800470c:	4284      	cmp	r4, r0
 800470e:	4607      	mov	r7, r0
 8004710:	d802      	bhi.n	8004718 <_realloc_r+0x34>
 8004712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004716:	d812      	bhi.n	800473e <_realloc_r+0x5a>
 8004718:	4621      	mov	r1, r4
 800471a:	4640      	mov	r0, r8
 800471c:	f7ff ff6e 	bl	80045fc <_malloc_r>
 8004720:	4605      	mov	r5, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	d0ed      	beq.n	8004702 <_realloc_r+0x1e>
 8004726:	42bc      	cmp	r4, r7
 8004728:	4622      	mov	r2, r4
 800472a:	4631      	mov	r1, r6
 800472c:	bf28      	it	cs
 800472e:	463a      	movcs	r2, r7
 8004730:	f7ff fed0 	bl	80044d4 <memcpy>
 8004734:	4631      	mov	r1, r6
 8004736:	4640      	mov	r0, r8
 8004738:	f7ff fef4 	bl	8004524 <_free_r>
 800473c:	e7e1      	b.n	8004702 <_realloc_r+0x1e>
 800473e:	4635      	mov	r5, r6
 8004740:	e7df      	b.n	8004702 <_realloc_r+0x1e>
	...

08004744 <_sbrk_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d06      	ldr	r5, [pc, #24]	; (8004760 <_sbrk_r+0x1c>)
 8004748:	2300      	movs	r3, #0
 800474a:	4604      	mov	r4, r0
 800474c:	4608      	mov	r0, r1
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	f7fc fd48 	bl	80011e4 <_sbrk>
 8004754:	1c43      	adds	r3, r0, #1
 8004756:	d102      	bne.n	800475e <_sbrk_r+0x1a>
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	b103      	cbz	r3, 800475e <_sbrk_r+0x1a>
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	bd38      	pop	{r3, r4, r5, pc}
 8004760:	200001d0 	.word	0x200001d0

08004764 <__malloc_lock>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__malloc_lock+0x8>)
 8004766:	f000 b811 	b.w	800478c <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	200001d4 	.word	0x200001d4

08004770 <__malloc_unlock>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__malloc_unlock+0x8>)
 8004772:	f000 b80c 	b.w	800478e <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	200001d4 	.word	0x200001d4

0800477c <_malloc_usable_size_r>:
 800477c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004780:	1f18      	subs	r0, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbc      	itt	lt
 8004786:	580b      	ldrlt	r3, [r1, r0]
 8004788:	18c0      	addlt	r0, r0, r3
 800478a:	4770      	bx	lr

0800478c <__retarget_lock_acquire_recursive>:
 800478c:	4770      	bx	lr

0800478e <__retarget_lock_release_recursive>:
 800478e:	4770      	bx	lr

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
